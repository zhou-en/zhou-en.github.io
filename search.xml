<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>En Zhou Launches Site</title>
    <url>/2017/08/25/2017-08-25-ZhouEn-site-launched/</url>
    <content><![CDATA[<p>Well. Finally got around to putting this old website together. Neat thing about it - powered by <a href="http://jekyllrb.com">Jekyll</a> and I can use Markdown to author my posts. It actually is a lot easier than I thought it was going to be.</p>
<a id="more"></a>
]]></content>
  </entry>
  <entry>
    <title>Enable Sublime Text in Tmux Command Line on MacOS</title>
    <url>/2018/07/12/2018-07-12-Enable-Sublime-Text-in-Tmux-Command-Line-on-MacOS/</url>
    <content><![CDATA[<h2 id="Problem-Description"><a href="#Problem-Description" class="headerlink" title="Problem Description"></a>Problem Description</h2><p>When you create a symbolic link to start sublime text editor from command line in tmux, you get an error message:</p>
<figure class="highlight text"><table><tbody><tr><td class="code"><pre><span class="line">Unable to launch sublime text</span><br></pre></td></tr></tbody></table></figure>

<p>This is due to tmux doesn’t have root access to the bin directory. The following steps fixed this issue for me on my Mac.</p>
<a id="more"></a>
<h2 id="System-Details-and-Application"><a href="#System-Details-and-Application" class="headerlink" title="System Details and Application"></a>System Details and Application</h2><ul>
<li><p>OS:</p>
  <figure class="highlight text"><table><tbody><tr><td class="code"><pre><span class="line">macOS Version 10.13.5</span><br></pre></td></tr></tbody></table></figure>
</li>
<li><p>Applications:</p>
  <figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">Sublime Text 3</span><br><span class="line">Tmux running from iTerm 2</span><br></pre></td></tr></tbody></table></figure>

</li>
</ul>
<h2 id="Create-Symbolic-Link-for-Sublime-Text-3"><a href="#Create-Symbolic-Link-for-Sublime-Text-3" class="headerlink" title="Create Symbolic Link for Sublime Text 3"></a>Create Symbolic Link for Sublime Text 3</h2><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">ln -s /Applications/Sublime\ Text.app/Contents/SharedSupport/bin/subl /usr/<span class="built_in">local</span>/bin/subl</span><br></pre></td></tr></tbody></table></figure>

<h2 id="Install-a-wrapper-to-handle-subl-w-in-tmux"><a href="#Install-a-wrapper-to-handle-subl-w-in-tmux" class="headerlink" title="Install a wrapper to handle subl -w in tmux"></a>Install a wrapper to handle subl -w in tmux</h2><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">brew install reattach-to-user-namespace</span><br></pre></td></tr></tbody></table></figure>

<h2 id="Add-command-to-tmux-conf"><a href="#Add-command-to-tmux-conf" class="headerlink" title="Add command to ~/.tmux.conf"></a>Add command to <code>~/.tmux.conf</code></h2><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="string">"set-option -g default-command \"reattach-to-user-namespace -l bash\""</span> &gt;&gt; ~/.tmux.conf</span><br></pre></td></tr></tbody></table></figure>

<h2 id="Restart-the-tmux-server"><a href="#Restart-the-tmux-server" class="headerlink" title="Restart the tmux server"></a>Restart the tmux server</h2><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">tmux kill-server</span><br></pre></td></tr></tbody></table></figure>
]]></content>
      <categories>
        <category>Text Editor</category>
        <category>IDE</category>
      </categories>
      <tags>
        <tag>Sublime</tag>
      </tags>
  </entry>
  <entry>
    <title>Deploy Django Using Gunicorn and Nginx</title>
    <url>/2020/10/19/2020-10-19-deploy-django-using-gunicorn-and-nginx/</url>
    <content><![CDATA[<h2 id="Install-Packages-from-the-Ubuntu-Repositories-for-Python-3"><a href="#Install-Packages-from-the-Ubuntu-Repositories-for-Python-3" class="headerlink" title="Install Packages from the Ubuntu Repositories for Python 3"></a>Install Packages from the Ubuntu Repositories for Python 3</h2><figure class="highlight sh"><table><tbody><tr><td class="code"><pre><span class="line">sudo apt-get install python3-pip python3-dev libpq-dev postgresql postgresql-contrib nginx</span><br></pre></td></tr></tbody></table></figure>
<a id="more"></a>
<h2 id="Create-the-PostgreSQL-Database-and-User"><a href="#Create-the-PostgreSQL-Database-and-User" class="headerlink" title="Create the PostgreSQL Database and User"></a>Create the PostgreSQL Database and User</h2><figure class="highlight sh"><table><tbody><tr><td class="code"><pre><span class="line">sudo -u postgres psql</span><br></pre></td></tr></tbody></table></figure>

<p>We are setting the default encoding to UTF-8, which Django expects. We are also setting the default transaction isolation scheme to “read committed”, which blocks reads from uncommitted transactions. Lastly, we are setting the timezone. By default, our Django projects will be set to use UTC. These are all recommendations from the <a href="https://docs.djangoproject.com/en/1.9/ref/databases/#optimizing-postgresql-s-configuration">Django project itself</a>:</p>
<figure class="highlight sql"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">USER</span> myprojectuser <span class="keyword">WITH</span> <span class="keyword">PASSWORD</span> <span class="string">'password'</span>;</span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">ROLE</span> myprojectuser <span class="keyword">SET</span> client_encoding <span class="keyword">TO</span> <span class="string">'utf8'</span>;</span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">ROLE</span> myprojectuser <span class="keyword">SET</span> default_transaction_isolation <span class="keyword">TO</span> <span class="string">'read committed'</span>;</span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">ROLE</span> myprojectuser <span class="keyword">SET</span> timezone <span class="keyword">TO</span> <span class="string">'UTC'</span>;</span><br><span class="line"><span class="keyword">GRANT</span> <span class="keyword">ALL</span> <span class="keyword">PRIVILEGES</span> <span class="keyword">ON</span> <span class="keyword">DATABASE</span> myproject <span class="keyword">TO</span> myprojectuser;</span><br></pre></td></tr></tbody></table></figure>

<h2 id="Create-a-Python-3-Virtual-Environment-for-your-Project"><a href="#Create-a-Python-3-Virtual-Environment-for-your-Project" class="headerlink" title="Create a Python 3 Virtual Environment for your Project"></a>Create a Python 3 Virtual Environment for your Project</h2><figure class="highlight sh"><table><tbody><tr><td class="code"><pre><span class="line">sudo -H pip3 install --upgrade pip</span><br><span class="line">sudo -H pip3 install virtualenv</span><br><span class="line">mkdir ~/myproject</span><br><span class="line"><span class="built_in">cd</span> ~/myproject</span><br><span class="line">virtualenv myprojectenv</span><br><span class="line"><span class="built_in">source</span> myprojectenv/bin/activate</span><br></pre></td></tr></tbody></table></figure>

<p>With your virtual environment active, install Django, Gunicorn, and the psycopg2 PostgreSQL adaptor with the local instance of pip:</p>
<figure class="highlight sh"><table><tbody><tr><td class="code"><pre><span class="line">pip install django gunicorn psycopg2</span><br></pre></td></tr></tbody></table></figure>

<h2 id="Create-and-Configure-a-New-Django-Project"><a href="#Create-and-Configure-a-New-Django-Project" class="headerlink" title="Create and Configure a New Django Project"></a>Create and Configure a New Django Project</h2><p>See: <a href="https://www.digitalocean.com/community/tutorials/how-to-set-up-django-with-postgres-nginx-and-gunicorn-on-ubuntu-16-04/#create-and-configure-new-django-project">How To Set Up Django with Postgres, Nginx, and Gunicorn on Ubuntu 16.04 | DigitalOcean</a></p>
<h2 id="Create-a-Gunicorn-systemd-Service-File-gunicorn-service-in-etc-systemd-system"><a href="#Create-a-Gunicorn-systemd-Service-File-gunicorn-service-in-etc-systemd-system" class="headerlink" title="Create a Gunicorn systemd Service File gunicorn.service in /etc/systemd/system/"></a>Create a Gunicorn systemd Service File <code>gunicorn.service</code> in <code>/etc/systemd/system/</code></h2><figure class="highlight sh"><table><tbody><tr><td class="code"><pre><span class="line">[Unit]</span><br><span class="line">Description=gunicorn daemon</span><br><span class="line">After=network.target</span><br><span class="line"></span><br><span class="line">[Service]</span><br><span class="line">User=sammy</span><br><span class="line">Group=www-data</span><br><span class="line">WorkingDirectory=/home/sammy/myproject</span><br><span class="line">ExecStart=/home/sammy/myproject/myprojectenv/bin/gunicorn --access-logfile - --workers 3 --<span class="built_in">bind</span> unix:/home/sammy/myproject/myproject.sock myproject.wsgi:application</span><br><span class="line"></span><br><span class="line">[Install]</span><br><span class="line">WantedBy=multi-user.target</span><br></pre></td></tr></tbody></table></figure>

<p>Start and enable gunicorn on system startup</p>
<figure class="highlight sh"><table><tbody><tr><td class="code"><pre><span class="line">sudo systemctl start gunicorn</span><br><span class="line">sudo systemctl <span class="built_in">enable</span> gunicorn</span><br></pre></td></tr></tbody></table></figure>

<h3 id="Check-for-the-Gunicorn-Socket-File"><a href="#Check-for-the-Gunicorn-Socket-File" class="headerlink" title="Check for the Gunicorn Socket File"></a>Check for the Gunicorn Socket File</h3><ul>
<li><p>Check gunicorn status</p>
<figure class="highlight sh"><table><tbody><tr><td class="code"><pre><span class="line">sudo systemctl status gunicorn</span><br></pre></td></tr></tbody></table></figure>
</li>
<li><p>Next, check for the existence of the myproject.sock file within your project directory:</p>
<figure class="highlight sh"><table><tbody><tr><td class="code"><pre><span class="line">ls /home/sammy/myproject</span><br><span class="line">manage.py  myproject  myprojectenv  myproject.sock  static</span><br></pre></td></tr></tbody></table></figure>
</li>
<li><p>View gunicorn logs</p>
</li>
</ul>
<figure class="highlight sh"><table><tbody><tr><td class="code"><pre><span class="line">sudo journalctl -u gunicorn</span><br></pre></td></tr></tbody></table></figure>

<ul>
<li>If you make changes to the /etc/systemd/system/gunicorn.service file, reload the daemon to reread the service definition and restart the Gunicorn process by typing:</li>
</ul>
<figure class="highlight sh"><table><tbody><tr><td class="code"><pre><span class="line">sudo systemctl daemon-reload</span><br><span class="line">sudo systemctl restart gunicorn</span><br></pre></td></tr></tbody></table></figure>

<h2 id="Configure-Nginx-to-Proxy-Pass-to-Gunicorn"><a href="#Configure-Nginx-to-Proxy-Pass-to-Gunicorn" class="headerlink" title="Configure Nginx to Proxy Pass to Gunicorn"></a>Configure Nginx to Proxy Pass to Gunicorn</h2><h3 id="creating-and-opening-a-new-server-block-in-Nginx’s-sites-available-directory"><a href="#creating-and-opening-a-new-server-block-in-Nginx’s-sites-available-directory" class="headerlink" title="creating and opening a new server block in Nginx’s sites-available directory:"></a>creating and opening a new server block in Nginx’s <code>sites-available</code> directory:</h3><figure class="highlight sh"><table><tbody><tr><td class="code"><pre><span class="line">sudo nano /etc/nginx/sites-available/myproject</span><br></pre></td></tr></tbody></table></figure>

<h3 id="The-comple-nginx-conf-file"><a href="#The-comple-nginx-conf-file" class="headerlink" title="The comple nginx conf file"></a>The comple nginx conf file</h3><figure class="highlight nginx"><table><tbody><tr><td class="code"><pre><span class="line"><span class="section">server</span> {</span><br><span class="line">    <span class="attribute">listen</span> <span class="number">80</span>;</span><br><span class="line">    <span class="attribute">server_name</span> server_domain_or_IP;</span><br><span class="line"></span><br><span class="line">    <span class="attribute">location</span> = /favicon.ico { <span class="attribute">access_log</span> <span class="literal">off</span>; <span class="attribute">log_not_found</span> <span class="literal">off</span>; }</span><br><span class="line">    <span class="attribute">location</span> /static/ {</span><br><span class="line">        <span class="attribute">root</span> /home/sammy/myproject;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="attribute">location</span> / {</span><br><span class="line">        <span class="attribute">include</span> proxy_params;</span><br><span class="line">        <span class="attribute">proxy_pass</span> http://unix:/home/sammy/myproject/myproject.sock;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>

<h3 id="Now-we-can-enable-the-file-by-linking-it-to-the-sites-enabled-directory"><a href="#Now-we-can-enable-the-file-by-linking-it-to-the-sites-enabled-directory" class="headerlink" title="Now, we can enable the file by linking it to the sites-enabled directory:"></a>Now, we can enable the file by linking it to the sites-enabled directory:</h3><figure class="highlight sh"><table><tbody><tr><td class="code"><pre><span class="line">sudo ln -s /etc/nginx/sites-available/myproject /etc/nginx/sites-enabled</span><br></pre></td></tr></tbody></table></figure>

<ul>
<li>Test <code>nginx</code></li>
</ul>
<figure class="highlight sh"><table><tbody><tr><td class="code"><pre><span class="line">sudo nginx -t</span><br></pre></td></tr></tbody></table></figure>

<ul>
<li>Restart</li>
</ul>
<figure class="highlight sh"><table><tbody><tr><td class="code"><pre><span class="line">sudo systemctl restart nginx</span><br></pre></td></tr></tbody></table></figure>

<ul>
<li>Finally, we need to open up our firewall to normal traffic on port 80. Since we no longer need access to the development server, we can remove the rule to open port 8000 as well:</li>
</ul>
<figure class="highlight sh"><table><tbody><tr><td class="code"><pre><span class="line">sudo ufw delete allow 8000</span><br><span class="line">sudo ufw allow <span class="string">'Nginx Full'</span></span><br></pre></td></tr></tbody></table></figure>
]]></content>
      <categories>
        <category>DevOps</category>
      </categories>
      <tags>
        <tag>Django</tag>
        <tag>Deploy</tag>
        <tag>Nginx</tag>
        <tag>Gunicorn</tag>
      </tags>
  </entry>
  <entry>
    <title>Encrypt and Decrypt File with `python-gnupg`</title>
    <url>/2020/10/21/Encrypt-and-Decrypt-File-with-python-gnupg/</url>
    <content><![CDATA[<h2 id="Installation-Deployment"><a href="#Installation-Deployment" class="headerlink" title="Installation/Deployment"></a>Installation/Deployment</h2><figure class="highlight sh"><table><tbody><tr><td class="code"><pre><span class="line">$ sudo apt-get install gnupg</span><br><span class="line">$ sudo adduser testgpguser</span><br><span class="line">$ sudo su testgpguser</span><br><span class="line">$ <span class="built_in">cd</span></span><br><span class="line">$ virtualenv --no-site-packages venv</span><br><span class="line">$ <span class="built_in">source</span> venv/bin/activate</span><br><span class="line">$ pip install python-gnupg</span><br></pre></td></tr></tbody></table></figure>
<a id="more"></a>
<h2 id="Importing-and-receiving-keys"><a href="#Importing-and-receiving-keys" class="headerlink" title="Importing and receiving keys"></a>Importing and receiving keys</h2><figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> gnupg</span><br><span class="line"><span class="keyword">from</span> pprint <span class="keyword">import</span> pprint</span><br><span class="line"></span><br><span class="line">gpg = gnupg.GPG(gnupghome=<span class="string">'/home/testgpguser/gpghome'</span>)</span><br><span class="line">key_data = open(<span class="string">'mykeyfile.asc'</span>).read()</span><br><span class="line">import_result = gpg.import_keys(key_data)</span><br><span class="line">pprint(import_result.results)</span><br></pre></td></tr></tbody></table></figure>

<h2 id="List-Keys"><a href="#List-Keys" class="headerlink" title="List Keys"></a>List Keys</h2><figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> gnupg</span><br><span class="line"><span class="keyword">from</span> pprint <span class="keyword">import</span> pprint</span><br><span class="line"></span><br><span class="line">gpg = gnupg.GPG(gnupghome=<span class="string">'/home/testgpguser/gpghome'</span>)</span><br><span class="line">public_keys = gpg.list_keys()</span><br><span class="line">private_keys = gpg.list_keys(<span class="literal">True</span>)</span><br><span class="line"><span class="keyword">print</span> <span class="string">'public keys:'</span></span><br><span class="line">pprint(public_keys)</span><br><span class="line"><span class="keyword">print</span> <span class="string">'private keys:'</span></span><br><span class="line">pprint(private_keys)</span><br></pre></td></tr></tbody></table></figure>

<h2 id="Encrypt-File"><a href="#Encrypt-File" class="headerlink" title="Encrypt File"></a>Encrypt File</h2><figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> gnupg</span><br><span class="line"></span><br><span class="line">gpg = gnupg.GPG(gnupghome=<span class="string">'/home/testgpguser/gpghome'</span>)</span><br><span class="line">open(<span class="string">'my-unencrypted.txt'</span>, <span class="string">'w'</span>).write(<span class="string">'You need to Google Venn diagram.'</span>)</span><br><span class="line"><span class="keyword">with</span> open(<span class="string">'my-unencrypted.txt'</span>, <span class="string">'rb'</span>) <span class="keyword">as</span> f:</span><br><span class="line">    status = gpg.encrypt_file(</span><br><span class="line">        f, recipients=[<span class="string">'testgpguser@mydomain.com'</span>],</span><br><span class="line">        output=<span class="string">'my-encrypted.txt.gpg'</span></span><br><span class="line">    )</span><br><span class="line">    <span class="keyword">print</span> <span class="string">'ok: '</span>, status.ok</span><br><span class="line">    <span class="keyword">print</span> <span class="string">'status: '</span>, status.status</span><br><span class="line">    <span class="keyword">print</span> <span class="string">'stderr: '</span>, status.stderr</span><br></pre></td></tr></tbody></table></figure>

<h2 id="Decrypt-File"><a href="#Decrypt-File" class="headerlink" title="Decrypt File"></a>Decrypt File</h2><figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> gnupg</span><br><span class="line"></span><br><span class="line">gpg = gnupg.GPG(gnupghome=<span class="string">'/home/testgpguser/gpghome'</span>)</span><br><span class="line"><span class="keyword">with</span> open(<span class="string">'my-encrypted.txt.gpg'</span>, <span class="string">'rb'</span>) <span class="keyword">as</span> f:</span><br><span class="line">    status = gpg.decrypt_file(f, passphrase=<span class="string">'mypassphrase'</span>, output=<span class="string">'my-decrypted.txt'</span>)</span><br><span class="line">    <span class="keyword">print</span> <span class="string">'ok: '</span>, status.ok</span><br><span class="line">    <span class="keyword">print</span> <span class="string">'status: '</span>, status.status</span><br><span class="line">    <span class="keyword">print</span> <span class="string">'stderr: '</span>, status.stderr</span><br></pre></td></tr></tbody></table></figure>

<h2 id="Encrypt-String"><a href="#Encrypt-String" class="headerlink" title="Encrypt String"></a>Encrypt String</h2><figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> gnupg</span><br><span class="line"></span><br><span class="line">gpg = gnupg.GPG(gnupghome=<span class="string">'/home/testgpguser/gpghome'</span>)</span><br><span class="line">unencrypted_string = <span class="string">'Who are you? How did you get in my house?'</span></span><br><span class="line">encrypted_data = gpg.encrypt(unencrypted_string, <span class="string">'testgpguser@mydomain.com'</span>)</span><br><span class="line">encrypted_string = str(encrypted_data)</span><br><span class="line"><span class="keyword">print</span> <span class="string">'ok: '</span>, encrypted_data.ok</span><br><span class="line"><span class="keyword">print</span> <span class="string">'status: '</span>, encrypted_data.status</span><br><span class="line"><span class="keyword">print</span> <span class="string">'stderr: '</span>, encrypted_data.stderr</span><br><span class="line"><span class="keyword">print</span> <span class="string">'unencrypted_string: '</span>, unencrypted_string</span><br><span class="line"><span class="keyword">print</span> <span class="string">'encrypted_string: '</span>, encrypted_string</span><br></pre></td></tr></tbody></table></figure>

<h2 id="Decrypt-String"><a href="#Decrypt-String" class="headerlink" title="Decrypt String"></a>Decrypt String</h2><figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> gnupg</span><br><span class="line"></span><br><span class="line">gpg = gnupg.GPG(gnupghome=<span class="string">'/home/testgpguser/gpghome'</span>)</span><br><span class="line">unencrypted_string = <span class="string">'Who are you? How did you get in my house?'</span></span><br><span class="line">encrypted_data = gpg.encrypt(unencrypted_string, <span class="string">'testgpguser@mydomain.com'</span>)</span><br><span class="line">encrypted_string = str(encrypted_data)</span><br><span class="line">decrypted_data = gpg.decrypt(encrypted_string, passphrase=<span class="string">'my passphrase'</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">print</span> <span class="string">'ok: '</span>, decrypted_data.ok</span><br><span class="line"><span class="keyword">print</span> <span class="string">'status: '</span>, decrypted_data.status</span><br><span class="line"><span class="keyword">print</span> <span class="string">'stderr: '</span>, decrypted_data.stderr</span><br><span class="line"><span class="keyword">print</span> <span class="string">'decrypted string: '</span>, decrypted_data.data</span><br></pre></td></tr></tbody></table></figure>

<h2 id="References"><a href="#References" class="headerlink" title="References"></a>References</h2><p><a href="https://pythonhosted.org/python-gnupg/">python-gnupg - A Python wrapper for GnuPG — Python Wrapper for GnuPG 0.4.0 documentation</a><br><a href="https://www.saltycrane.com/blog/2011/10/python-gnupg-gpg-example/">Python gnupg (GPG) example - SaltyCrane Blog</a></p>
]]></content>
  </entry>
  <entry>
    <title>Some Notes on Poetry</title>
    <url>/2020/10/25/Some-Notes-on-Poetry/</url>
    <content><![CDATA[<h2 id="Install-poetry-on-Ubuntu-20-04"><a href="#Install-poetry-on-Ubuntu-20-04" class="headerlink" title="Install poetry on Ubuntu 20.04"></a>Install <code>poetry</code> on Ubuntu 20.04</h2><figure class="highlight sh"><table><tbody><tr><td class="code"><pre><span class="line">curl -sSL https://raw.githubusercontent.com/python-poetry/poetry/master/get-poetry.py | python -</span><br></pre></td></tr></tbody></table></figure>
<p>REF: <a href="https://python-poetry.org/docs/#installation">https://python-poetry.org/docs/#installation</a></p>
<a id="more"></a>
<h2 id="Error-when-starting-poetry-shell"><a href="#Error-when-starting-poetry-shell" class="headerlink" title="Error when starting poetry shell"></a>Error when starting <code>poetry shell</code></h2><figure class="highlight sh"><table><tbody><tr><td class="code"><pre><span class="line">ModuleNotFoundError: No module named <span class="string">'virtualenv.seed.via_app_data'</span></span><br></pre></td></tr></tbody></table></figure>
<p>This is due to the <code>virtualenv</code> installed in the system, it can be solved by removing it:</p>
<figure class="highlight sh"><table><tbody><tr><td class="code"><pre><span class="line">sudo apt remove python3-virtualenv</span><br></pre></td></tr></tbody></table></figure>

<h2 id="Add-packages-from-existing-requirements-txt"><a href="#Add-packages-from-existing-requirements-txt" class="headerlink" title="Add packages from existing requirements.txt"></a>Add packages from existing <code>requirements.txt</code></h2><p>Sometimes you already have a project and <code>reqirements.txt</code> setup, but you wantted to start using <code>poetry</code> to manage your dependencies. Here are the steps to add the existing dependencies from <code>requirements.txt</code> to <code>pyproject.toml</code> that generate by <code>poetry</code>.</p>
<ul>
<li>Start by generate a <code>pyproject.toml</code> file for <code>poetry</code>:<figure class="highlight sh"><table><tbody><tr><td class="code"><pre><span class="line">poetry init</span><br></pre></td></tr></tbody></table></figure></li>
<li>In the directory where both <code>requirement.txt</code> and <code>pyproject.toml</code> are stored, run this command:<figure class="highlight sh"><table><tbody><tr><td class="code"><pre><span class="line">cat requirements.txt | perl -pe <span class="string">'s/([&lt;=&gt;]+)/:$1/'</span> | xargs -t -n 1 -I {} poetry add <span class="string">'{}'</span></span><br></pre></td></tr></tbody></table></figure>
</li>
</ul>
]]></content>
      <tags>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>Python Datetime Libs</title>
    <url>/2019/10/02/Python-Datetime-Libs/</url>
    <content><![CDATA[<h3 id="Python-Date-Time-Libries-pytz-dateutil-and-pendulum"><a href="#Python-Date-Time-Libries-pytz-dateutil-and-pendulum" class="headerlink" title="Python Date Time Libries: pytz, dateutil, and pendulum"></a>Python Date Time Libries: <code>pytz</code>, <code>dateutil</code>, and <code>pendulum</code></h3><p>Write a few paragraphs on converting UTC datetime to localized timezone datetime using the 3 libraries.</p>
<a id="more"></a>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> datetime</span><br><span class="line"><span class="keyword">from</span> datetime <span class="keyword">import</span> timedelta</span><br><span class="line"><span class="keyword">import</span> pytz</span><br><span class="line"><span class="keyword">import</span> dateutil</span><br><span class="line"><span class="keyword">import</span> pendulum</span><br><span class="line"></span><br><span class="line"><span class="comment"># Test scenarios</span></span><br><span class="line"><span class="comment"># 1. Create a timezone free UTC version of now</span></span><br><span class="line"><span class="comment"># 2. Convert that to the following zones:</span></span><br><span class="line"><span class="comment"># - South Africa</span></span><br><span class="line"><span class="comment"># - US Eastern</span></span><br><span class="line"><span class="comment"># - US Pacific</span></span><br><span class="line"><span class="comment"># - Germany</span></span><br><span class="line"><span class="comment"># - Japan</span></span><br><span class="line"><span class="comment"># - India (Weird 30m offset)</span></span><br><span class="line"><span class="comment"># 3. Do the same for a specific time (2019/08/02 10:33:45+00:00)</span></span><br><span class="line"><span class="comment"># 3. Create a zoned UTC time on the edge of several DST switch overs</span></span><br><span class="line"><span class="comment"># 4. Check before and after times</span></span><br><span class="line"><span class="comment"># 6. Check what happens in the DST switch period (Sunday, November 3, 2:00 am LOCAL)</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># Some details on DST in the US: https://www.timeanddate.com/time/change/usa</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># fmt = '%Y-%m-%d %H:%M:%S.%f %Z%z'</span></span><br><span class="line">fmt = <span class="string">'%Y-%m-%d %H:%M:%S.%f %Z%z'</span></span><br><span class="line">utc_zone = <span class="string">'UTC'</span></span><br><span class="line">cat_zone = <span class="string">'Africa/Johannesburg'</span></span><br><span class="line">use_zone = <span class="string">'US/Eastern'</span></span><br><span class="line">ger_zone = <span class="string">'Europe/Berlin'</span></span><br><span class="line">tok_zone = <span class="string">'Asia/Tokyo'</span></span><br><span class="line">kol_zone = <span class="string">'Asia/Kolkata'</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">pytz_spike</span>():</span></span><br><span class="line"></span><br><span class="line">    print(<span class="string">'pytz'</span>)</span><br><span class="line">    print(<span class="string">'========'</span>)</span><br><span class="line">    <span class="comment"># Localize timezone free UTC now</span></span><br><span class="line">    now = datetime.datetime.utcnow()</span><br><span class="line"></span><br><span class="line">    utc = pytz.utc</span><br><span class="line">    cat = pytz.timezone(cat_zone)</span><br><span class="line">    use = pytz.timezone(use_zone)</span><br><span class="line">    ger = pytz.timezone(ger_zone)</span><br><span class="line">    tok = pytz.timezone(tok_zone)</span><br><span class="line">    kol = pytz.timezone(kol_zone)</span><br><span class="line"></span><br><span class="line">    utc_now = utc.localize(now)</span><br><span class="line">    cat_now = cat.localize(now)</span><br><span class="line">    use_now = use.localize(now)</span><br><span class="line">    ger_now = ger.localize(now)</span><br><span class="line">    tok_now = tok.localize(now)</span><br><span class="line">    kol_now = kol.localize(now)</span><br><span class="line"></span><br><span class="line">    print(<span class="string">f'Localize timezone free now() to following timezone:'</span>)</span><br><span class="line">    print(utc_now.strftime(fmt))</span><br><span class="line">    print(cat_now.strftime(fmt))</span><br><span class="line">    print(use_now.strftime(fmt))</span><br><span class="line">    print(ger_now.strftime(fmt))</span><br><span class="line">    print(tok_now.strftime(fmt))</span><br><span class="line">    print(kol_now.strftime(fmt))</span><br><span class="line"></span><br><span class="line">    <span class="comment"># Localize a specific datetime, (2019/08/02 10:33:45+00:00)</span></span><br><span class="line">    target_date = datetime.datetime(<span class="number">2019</span>, <span class="number">7</span>, <span class="number">21</span>, <span class="number">10</span>, <span class="number">33</span>, <span class="number">45</span>)</span><br><span class="line">    print(<span class="string">f'\nLocalize (2019/08/02 10:33:45+00:00) into following timezones:'</span>)</span><br><span class="line">    print(utc.localize(target_date).strftime(fmt))</span><br><span class="line">    print(cat.localize(target_date).strftime(fmt))</span><br><span class="line">    print(use.localize(target_date).strftime(fmt))</span><br><span class="line">    print(ger.localize(target_date).strftime(fmt))</span><br><span class="line">    print(tok.localize(target_date).strftime(fmt))</span><br><span class="line">    print(kol.localize(target_date).strftime(fmt))</span><br><span class="line"></span><br><span class="line">    <span class="comment"># Before DST</span></span><br><span class="line">    print(<span class="string">f'\n<span class="subst">{use_zone}</span>: 10 January 2019, 12:34:12'</span>)</span><br><span class="line">    use_before = datetime.datetime(<span class="number">2019</span>, <span class="number">1</span>, <span class="number">10</span>, <span class="number">12</span>, <span class="number">34</span>, <span class="number">12</span>, <span class="number">999999</span>)</span><br><span class="line">    print(use.localize(use_before).strftime(fmt))</span><br><span class="line"></span><br><span class="line">    before_dst = datetime.datetime(<span class="number">2019</span>, <span class="number">3</span>, <span class="number">10</span>, <span class="number">1</span>, <span class="number">30</span>, <span class="number">59</span>, <span class="number">999999</span>)</span><br><span class="line">    print(<span class="string">f'\n<span class="subst">{use_zone}</span>: 2019-03-10, 02:00:00 clocks were turned forward 1 hour '</span>)</span><br><span class="line">    print(<span class="string">'timezone only changes after 3:00'</span>)</span><br><span class="line">    print(use.localize(before_dst).strftime(fmt))</span><br><span class="line">    minutes_added = <span class="number">40</span></span><br><span class="line">    print(<span class="string">f'Add <span class="subst">{minutes_added}</span> minutes:'</span>)</span><br><span class="line">    print(use.localize(before_dst+timedelta(minutes=minutes_added)).strftime(fmt))</span><br><span class="line"></span><br><span class="line">    before_dst = datetime.datetime(<span class="number">2019</span>, <span class="number">11</span>, <span class="number">3</span>, <span class="number">0</span>, <span class="number">30</span>, <span class="number">59</span>, <span class="number">999999</span>)</span><br><span class="line">    print(<span class="string">f'\n<span class="subst">{use_zone}</span>: 2019-11-3, 02:00:00 clocks are turned backward 1 hour '</span>)</span><br><span class="line">    print(<span class="string">'timezone only changes after 3:00'</span>)</span><br><span class="line">    print(use.localize(before_dst).strftime(fmt))</span><br><span class="line">    minutes_added = <span class="number">100</span></span><br><span class="line">    print(<span class="string">f'Add <span class="subst">{minutes_added}</span> minutes:'</span>)</span><br><span class="line">    print(use.localize(before_dst + timedelta(minutes=minutes_added)).strftime(fmt))</span><br><span class="line"></span><br><span class="line">    print(<span class="string">'\n'</span>+use.localize(before_dst).strftime(fmt))</span><br><span class="line">    minutes_added = <span class="number">40</span></span><br><span class="line">    print(<span class="string">f'Add <span class="subst">{minutes_added}</span> minutes:'</span>)</span><br><span class="line">    print(use.localize(before_dst + timedelta(minutes=minutes_added)).strftime(fmt))</span><br><span class="line"></span><br><span class="line">    after_dst = datetime.datetime(<span class="number">2019</span>, <span class="number">11</span>, <span class="number">3</span>, <span class="number">2</span>, <span class="number">30</span>, <span class="number">59</span>, <span class="number">999999</span>)</span><br><span class="line">    print(<span class="string">f'After DST: <span class="subst">{use.localize(after_dst).strftime(fmt)}</span>'</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">python_dateutil_spike</span>():</span></span><br><span class="line">    print(<span class="string">'\ndateutil'</span>)</span><br><span class="line">    print(<span class="string">'========'</span>)</span><br><span class="line">    utc = dateutil.tz.gettz(utc_zone)</span><br><span class="line">    use = dateutil.tz.gettz(use_zone)</span><br><span class="line">    ger = dateutil.tz.gettz(ger_zone)</span><br><span class="line">    tok = dateutil.tz.gettz(tok_zone)</span><br><span class="line">    kol = dateutil.tz.gettz(kol_zone)</span><br><span class="line"></span><br><span class="line">    mar_10th = datetime.datetime(<span class="number">2019</span>, <span class="number">3</span>, <span class="number">10</span>, <span class="number">6</span>, <span class="number">30</span>, <span class="number">0</span>, <span class="number">0</span>, tzinfo=utc)</span><br><span class="line">    print(mar_10th.astimezone(utc).strftime(fmt))</span><br><span class="line">    print(mar_10th.astimezone(use).strftime(fmt) + <span class="string">f' <span class="subst">{use_zone}</span>'</span>)</span><br><span class="line">    minutes_added = <span class="number">40</span></span><br><span class="line">    print(<span class="string">f'Add <span class="subst">{minutes_added}</span> minutes'</span>)</span><br><span class="line">    mar_10th_updated = mar_10th + timedelta(minutes=minutes_added)</span><br><span class="line">    print(mar_10th_updated.astimezone(use).strftime(fmt) + <span class="string">f' <span class="subst">{use_zone}</span>'</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">pendulum_spike</span>():</span></span><br><span class="line">    print(<span class="string">'\npendulum'</span>)</span><br><span class="line">    print(<span class="string">'========'</span>)</span><br><span class="line">    <span class="comment"># Localize timezone free UTC now</span></span><br><span class="line">    utc_now = pendulum.utcnow()</span><br><span class="line">    year = utc_now.year</span><br><span class="line">    month = utc_now.month</span><br><span class="line">    day = utc_now.day</span><br><span class="line">    hour = utc_now.hour</span><br><span class="line">    minute = utc_now.minute</span><br><span class="line">    second = utc_now.second</span><br><span class="line">    micro_sec = utc_now.microsecond</span><br><span class="line"></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    Create datetime string, timezone free</span></span><br><span class="line"><span class="string">    Localize the time string by adding timezones </span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    print(<span class="string">'Localize UTC time now'</span>)</span><br><span class="line">    utc = pendulum.datetime(year, month, day, hour, minute, second, micro_sec, tzinfo=utc_zone)</span><br><span class="line">    print(<span class="string">f'<span class="subst">{utc.strftime(fmt)}</span>  -\t<span class="subst">{utc_zone}</span>'</span>)</span><br><span class="line"></span><br><span class="line">    cat = pendulum.datetime(year, month, day, hour, minute, second, micro_sec, tzinfo=cat_zone)</span><br><span class="line">    print(<span class="string">f'<span class="subst">{cat.strftime(fmt)}</span> -\t<span class="subst">{cat_zone}</span>'</span>)</span><br><span class="line"></span><br><span class="line">    use = pendulum.datetime(year, month, day, hour, minute, second, micro_sec, tzinfo=use_zone)</span><br><span class="line">    print(<span class="string">f'<span class="subst">{use.strftime(fmt)}</span>  -\t<span class="subst">{use_zone}</span>'</span>)</span><br><span class="line"></span><br><span class="line">    ger = pendulum.datetime(year, month, day, hour, minute, second, micro_sec, tzinfo=ger_zone)</span><br><span class="line">    print(<span class="string">f'<span class="subst">{ger.strftime(fmt)}</span> -\t<span class="subst">{ger_zone}</span>'</span>)</span><br><span class="line"></span><br><span class="line">    tok = pendulum.datetime(year, month, day, hour, minute, second, micro_sec, tzinfo=tok_zone)</span><br><span class="line">    print(<span class="string">f'<span class="subst">{tok.strftime(fmt)}</span>  -\t<span class="subst">{tok_zone}</span>'</span>)</span><br><span class="line"></span><br><span class="line">    kol = pendulum.datetime(year, month, day, hour, minute, second, micro_sec, tzinfo=kol_zone)</span><br><span class="line">    print(<span class="string">f'<span class="subst">{kol.strftime(fmt)}</span>  -\t<span class="subst">{kol_zone}</span>'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">###############################################################################</span></span><br><span class="line">    before_dst = datetime.datetime(<span class="number">2019</span>, <span class="number">3</span>, <span class="number">31</span>, <span class="number">1</span>, <span class="number">59</span>, <span class="number">59</span>, <span class="number">999999</span>)</span><br><span class="line">    ger = pendulum.datetime(</span><br><span class="line">        before_dst.year, before_dst.month, before_dst.day, before_dst.hour,</span><br><span class="line">        before_dst.minute, before_dst.second, before_dst.microsecond,</span><br><span class="line">        tzinfo=ger_zone</span><br><span class="line">    )</span><br><span class="line">    print(</span><br><span class="line">        <span class="string">f'\n<span class="subst">{ger_zone}</span>: '</span></span><br><span class="line">        <span class="string">f'Sunday, 31 March 2019, 02:00:00 clocks were turned forward 1 hour'</span></span><br><span class="line">    )</span><br><span class="line">    print(ger.strftime(fmt))</span><br><span class="line">    print(<span class="string">'Add 1 microsecond'</span>)</span><br><span class="line">    print(ger.add(microseconds=<span class="number">1</span>).strftime(fmt))</span><br><span class="line"></span><br><span class="line">    before_dst = datetime.datetime(<span class="number">2019</span>, <span class="number">10</span>, <span class="number">27</span>, <span class="number">1</span>, <span class="number">59</span>, <span class="number">59</span>, <span class="number">999999</span>)</span><br><span class="line">    ger = pendulum.datetime(</span><br><span class="line">        before_dst.year, before_dst.month, before_dst.day, before_dst.hour,</span><br><span class="line">        before_dst.minute, before_dst.second, before_dst.microsecond,</span><br><span class="line">        tzinfo=ger_zone</span><br><span class="line">    )</span><br><span class="line">    print(<span class="string">f'\n<span class="subst">{ger_zone}</span>: Sunday, 27 October 2019, 03:00:00 clocks are turned backward 1 hour'</span>)</span><br><span class="line">    print(ger.strftime(fmt))</span><br><span class="line">    print(<span class="string">f'Add 85 minutes to pass 3:00'</span>)</span><br><span class="line">    print(ger.add(minutes=<span class="number">85</span>).strftime(fmt))</span><br><span class="line"><span class="comment">###############################################################################</span></span><br><span class="line">    before_dst = datetime.datetime(<span class="number">2019</span>, <span class="number">1</span>, <span class="number">10</span>, <span class="number">12</span>, <span class="number">34</span>, <span class="number">12</span>, <span class="number">999999</span>)</span><br><span class="line">    use = pendulum.datetime(</span><br><span class="line">        before_dst.year, before_dst.month, before_dst.day, before_dst.hour,</span><br><span class="line">        before_dst.minute, before_dst.second, before_dst.microsecond,</span><br><span class="line">        tzinfo=use_zone</span><br><span class="line">    )</span><br><span class="line">    print(<span class="string">f'\n<span class="subst">{use_zone}</span>: 10 January 2019, 12:34:12'</span>)</span><br><span class="line">    print(use.strftime(fmt))</span><br><span class="line"></span><br><span class="line">    before_dst = datetime.datetime(<span class="number">2019</span>, <span class="number">3</span>, <span class="number">10</span>, <span class="number">1</span>, <span class="number">30</span>, <span class="number">59</span>, <span class="number">999999</span>)</span><br><span class="line">    use = pendulum.datetime(</span><br><span class="line">        before_dst.year, before_dst.month, before_dst.day, before_dst.hour,</span><br><span class="line">        before_dst.minute, before_dst.second, before_dst.microsecond,</span><br><span class="line">        tzinfo=use_zone</span><br><span class="line">    )</span><br><span class="line">    print(<span class="string">f'\n<span class="subst">{use_zone}</span>: Sunday, 10 March 2019, 02:00:00 clocks were turned forward 1 hour'</span>)</span><br><span class="line">    print(<span class="string">'Timezone starts changing after 2:00'</span>)</span><br><span class="line">    print(use.strftime(fmt))</span><br><span class="line">    minutes_added = <span class="number">40</span></span><br><span class="line">    print(<span class="string">f'Add <span class="subst">{minutes_added}</span> minutes:'</span>)</span><br><span class="line">    print(use.add(minutes=minutes_added).strftime(fmt))</span><br><span class="line"></span><br><span class="line">    after_dst = datetime.datetime(<span class="number">2019</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">12</span>, <span class="number">34</span>, <span class="number">12</span>, <span class="number">999999</span>)</span><br><span class="line">    use = pendulum.datetime(</span><br><span class="line">        after_dst.year, after_dst.month, after_dst.day, after_dst.hour,</span><br><span class="line">        after_dst.minute, after_dst.second, after_dst.microsecond,</span><br><span class="line">        tzinfo=use_zone</span><br><span class="line">    )</span><br><span class="line">    print(<span class="string">f'\n<span class="subst">{use_zone}</span>: 5 April 2019, 12:34:12'</span>)</span><br><span class="line">    print(use.strftime(fmt))</span><br><span class="line"></span><br><span class="line">    before_dst = datetime.datetime(<span class="number">2019</span>, <span class="number">11</span>, <span class="number">3</span>, <span class="number">0</span>, <span class="number">40</span>, <span class="number">00</span>, <span class="number">0</span>)</span><br><span class="line">    use = pendulum.datetime(</span><br><span class="line">        before_dst.year, before_dst.month, before_dst.day, before_dst.hour,</span><br><span class="line">        before_dst.minute, before_dst.second, before_dst.microsecond,</span><br><span class="line">        tzinfo=use_zone</span><br><span class="line">    )</span><br><span class="line">    print(<span class="string">f'\n<span class="subst">{use_zone}</span>: Sunday, 3 November 2019, 02:00:00 clocks are turned backward 1 hour '</span>)</span><br><span class="line">    print(use.strftime(fmt))</span><br><span class="line">    minutes_added = <span class="number">85</span></span><br><span class="line">    print(<span class="string">f'Add: <span class="subst">{minutes_added}</span> minutes'</span>)</span><br><span class="line">    print(use.add(minutes=minutes_added).strftime(fmt))</span><br><span class="line"></span><br><span class="line">    before_dst = datetime.datetime(<span class="number">2019</span>, <span class="number">11</span>, <span class="number">3</span>, <span class="number">0</span>, <span class="number">40</span>, <span class="number">00</span>, <span class="number">0</span>)</span><br><span class="line">    use = pendulum.datetime(</span><br><span class="line">        before_dst.year, before_dst.month, before_dst.day, before_dst.hour,</span><br><span class="line">        before_dst.minute, before_dst.second, before_dst.microsecond,</span><br><span class="line">        tzinfo=use_zone</span><br><span class="line">    )</span><br><span class="line">    print(<span class="string">'\n'</span> + use.strftime(fmt))</span><br><span class="line">    minutes_added = <span class="number">35</span></span><br><span class="line">    print(<span class="string">f'Add: <span class="subst">{minutes_added}</span> minutes'</span>)</span><br><span class="line">    print(use.add(minutes=minutes_added).strftime(fmt))</span><br><span class="line"></span><br><span class="line">    after_dst = datetime.datetime(<span class="number">2019</span>, <span class="number">11</span>, <span class="number">3</span>, <span class="number">3</span>, <span class="number">44</span>, <span class="number">12</span>, <span class="number">999999</span>)</span><br><span class="line">    use = pendulum.datetime(</span><br><span class="line">        after_dst.year, after_dst.month, after_dst.day, after_dst.hour,</span><br><span class="line">        after_dst.minute, after_dst.second, after_dst.microsecond,</span><br><span class="line">        tzinfo=use_zone</span><br><span class="line">    )</span><br><span class="line">    print(<span class="string">f'\n<span class="subst">{use_zone}</span>: <span class="subst">{use.strftime(fmt)}</span>'</span>)</span><br><span class="line"><span class="comment">###############################################################################</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    pytz_spike()</span><br><span class="line">    python_dateutil_spike()</span><br><span class="line">    pendulum_spike()</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure>
]]></content>
      <tags>
        <tag>Python</tag>
        <tag>Datetime</tag>
      </tags>
  </entry>
  <entry>
    <title>Hello World</title>
    <url>/2019/12/12/hello-world/</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p>
<a id="more"></a>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></tbody></table></figure>

<p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></tbody></table></figure>

<p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></tbody></table></figure>

<p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></tbody></table></figure>

<p>More info: <a href="https://hexo.io/docs/deployment.html">Deployment</a></p>
]]></content>
      <categories>
        <category>Quick Start</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>About Me</title>
    <url>/about/index.html</url>
    <content><![CDATA[<!--
-------------------     ----------------------------
MyAddress                        email@example.com
MyTown 1000                          @twitter_handle
MyCountry                           1800 my-phone-nr
-------------------     ---------------------------- 
-->

<h2 id="Education"><a href="#Education" class="headerlink" title="Education"></a>Education</h2><dl><dt>2007-2009</dt><dd><strong>MSc, Computational Physics</strong>; University of the Western Cape (Cape Town,<br>South Africa)</dd></dl><pre><code>*Thesis title: Deep Learning Approaches to the Self-Awesomeness Estimation Problem*</code></pre><dl><dt>2003-2006</dt><dd><strong>BSc, Physics and Mathematics</strong>; University of the Western Cape (Cape<br>Town, South Africa)</dd></dl><h2 id="Experience"><a href="#Experience" class="headerlink" title="Experience"></a>Experience</h2><p><strong>Your Most Recent Work Experience:</strong></p>
<p>Short text containing the type of work done, results obtained,<br>lessons learned and other remarks. Can also include lists and<br>links:</p>
<ul>
<li><p>First item</p>
</li>
<li><p>Item with <a href="http://www.example.com">link</a>. Links will work both in<br>the html and pdf versions.</p>
</li>
</ul>
<p><strong>That Other Job You Had</strong></p>
<p>Also with a short description.</p>
<h2 id="Technical-Experience"><a href="#Technical-Experience" class="headerlink" title="Technical Experience"></a>Technical Experience</h2><dl><dt>My Cool Side Project</dt><dd>For items which don’t have a clear time ordering, a definition<br>    list can be used to have named items.</dd></dl><pre><code>* These items can also contain lists, but you need to mind the
  indentation levels in the markdown source.
* Second item.</code></pre><dl><dt>Open Source</dt><dd>List open source contributions here, perhaps placing emphasis on<br>    the project names, for example the <strong>Linux Kernel</strong>, where you<br>    implemented multithreading over a long weekend, or <strong>node.js</strong><br>    (with <a href="http://nodejs.org">link</a>) which was actually totally<br>    your idea…</dd></dl><dl><dt>Programming Languages</dt><dd><strong>first-lang:</strong> Here, we have an itemization, where we only want<br>    to add descriptions to the first few items, but still want to<br>    mention some others together at the end. A format that works well<br>    here is a description list where the first few items have their<br>    first word emphasized, and the last item contains the final few<br>    emphasized terms. Notice the reasonably nice page break in the pdf<br>    version, which wouldn’t happen if we generated the pdf via html.</dd></dl><p>:   <strong>second-lang:</strong> Description of your experience with second-lang,<br>    perhaps again including a [link] <a href="https://github.com/githubuser/superlongprojectname">ref</a>, this time placing the url<br>    reference elsewhere in the document to reduce clutter (see source<br>    file). </p>
<p>:   <strong>obscure-but-impressive-lang:</strong> We both know this one’s pushing<br>    it.</p>
<p>:   Basic knowledge of <strong>C</strong>, <strong>x86 assembly</strong>, <strong>forth</strong>, <strong>Common Lisp</strong></p>
<h2 id="Extra-Section-Call-it-Whatever-You-Want"><a href="#Extra-Section-Call-it-Whatever-You-Want" class="headerlink" title="Extra Section, Call it Whatever You Want"></a>Extra Section, Call it Whatever You Want</h2><ul>
<li><p>Human Languages:</p>
<ul>
<li>English (Fluent)</li>
<li>Chinese (Native)</li>
</ul>
</li>
<li><p>Random tidbit</p>
</li>
<li><p>Other sort of impressive-sounding thing you did</p>
</li>
</ul>
]]></content>
  </entry>
  <entry>
    <title>404</title>
    <url>/404.html</url>
    <content><![CDATA[]]></content>
  </entry>
  <entry>
    <title>Tags</title>
    <url>/tags/index.html</url>
    <content><![CDATA[]]></content>
  </entry>
  <entry>
    <title>Categories</title>
    <url>/categories/index.html</url>
    <content><![CDATA[]]></content>
  </entry>
</search>
