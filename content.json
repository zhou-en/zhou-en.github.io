{"meta":{"title":"En's Blog","subtitle":"Techy blogs","description":null,"author":"En Zhou","url":"http://zhou-en.github.io","root":"/"},"pages":[{"title":"About Me","date":"2019-10-02T00:20:05.000Z","updated":"2021-01-26T22:23:54.197Z","comments":false,"path":"about/index.html","permalink":"http://zhou-en.github.io/about/index.html","excerpt":"","text":"Education2007-2009MSc, Computational Physics; University of the Western Cape (Cape Town,South Africa)*Thesis title: Deep Learning Approaches to the Self-Awesomeness Estimation Problem*2003-2006BSc, Physics and Mathematics; University of the Western Cape (CapeTown, South Africa)ExperienceYour Most Recent Work Experience: Short text containing the type of work done, results obtained,lessons learned and other remarks. Can also include lists andlinks: First item Item with link. Links will work both inthe html and pdf versions. That Other Job You Had Also with a short description. Technical ExperienceMy Cool Side ProjectFor items which don’t have a clear time ordering, a definition list can be used to have named items.* These items can also contain lists, but you need to mind the indentation levels in the markdown source. * Second item.Open SourceList open source contributions here, perhaps placing emphasis on the project names, for example the Linux Kernel, where you implemented multithreading over a long weekend, or node.js (with link) which was actually totally your idea…Programming Languagesfirst-lang: Here, we have an itemization, where we only want to add descriptions to the first few items, but still want to mention some others together at the end. A format that works well here is a description list where the first few items have their first word emphasized, and the last item contains the final few emphasized terms. Notice the reasonably nice page break in the pdf version, which wouldn’t happen if we generated the pdf via html.: second-lang: Description of your experience with second-lang, perhaps again including a [link] ref, this time placing the url reference elsewhere in the document to reduce clutter (see source file). : obscure-but-impressive-lang: We both know this one’s pushing it. : Basic knowledge of C, x86 assembly, forth, Common Lisp Extra Section, Call it Whatever You Want Human Languages: English (Fluent) Chinese (Native) Random tidbit Other sort of impressive-sounding thing you did"},{"title":"404","date":"2020-10-19T12:32:01.066Z","updated":"2020-10-19T12:32:01.066Z","comments":true,"path":"404.html","permalink":"http://zhou-en.github.io/404.html","excerpt":"","text":""},{"title":"Tags","date":"2019-10-03T20:43:18.000Z","updated":"2020-10-12T09:37:34.183Z","comments":true,"path":"tags/index.html","permalink":"http://zhou-en.github.io/tags/index.html","excerpt":"","text":""},{"title":"Categories","date":"2019-10-03T20:43:23.000Z","updated":"2020-10-12T09:37:34.182Z","comments":true,"path":"categories/index.html","permalink":"http://zhou-en.github.io/categories/index.html","excerpt":"","text":""}],"posts":[{"title":"Some Notes on Poetry","slug":"Some-Notes-on-Poetry","date":"2020-10-25T20:56:41.000Z","updated":"2021-01-26T21:21:55.562Z","comments":true,"path":"2020/10/25/Some-Notes-on-Poetry/","link":"","permalink":"http://zhou-en.github.io/2020/10/25/Some-Notes-on-Poetry/","excerpt":"Install poetry on Ubuntu 20.041curl -sSL https://raw.githubusercontent.com/python-poetry/poetry/master/get-poetry.py | python - REF: https://python-poetry.org/docs/#installation","text":"Install poetry on Ubuntu 20.041curl -sSL https://raw.githubusercontent.com/python-poetry/poetry/master/get-poetry.py | python - REF: https://python-poetry.org/docs/#installation Error when starting poetry shell1ModuleNotFoundError: No module named 'virtualenv.seed.via_app_data' This is due to the virtualenv installed in the system, it can be solved by removing it: 1sudo apt remove python3-virtualenv Add packages from existing requirements.txtSometimes you already have a project and reqirements.txt setup, but you wantted to start using poetry to manage your dependencies. Here are the steps to add the existing dependencies from requirements.txt to pyproject.toml that generate by poetry. Start by generate a pyproject.toml file for poetry:1poetry init In the directory where both requirement.txt and pyproject.toml are stored, run this command:1cat requirements.txt | perl -pe 's/([&lt;=&gt;]+)/:$1/' | xargs -t -n 1 -I {} poetry add '{}'","categories":[],"tags":[{"name":"python","slug":"python","permalink":"http://zhou-en.github.io/tags/python/"}]},{"title":"Encrypt and Decrypt File with `python-gnupg`","slug":"Encrypt-and-Decrypt-File-with-python-gnupg","date":"2020-10-20T22:23:54.000Z","updated":"2021-01-26T21:21:55.561Z","comments":true,"path":"2020/10/21/Encrypt-and-Decrypt-File-with-python-gnupg/","link":"","permalink":"http://zhou-en.github.io/2020/10/21/Encrypt-and-Decrypt-File-with-python-gnupg/","excerpt":"Installation/Deployment1234567$ sudo apt-get install gnupg$ sudo adduser testgpguser$ sudo su testgpguser$ cd$ virtualenv --no-site-packages venv$ source venv/bin/activate$ pip install python-gnupg","text":"Installation/Deployment1234567$ sudo apt-get install gnupg$ sudo adduser testgpguser$ sudo su testgpguser$ cd$ virtualenv --no-site-packages venv$ source venv/bin/activate$ pip install python-gnupg Importing and receiving keys1234567import gnupgfrom pprint import pprintgpg = gnupg.GPG(gnupghome='/home/testgpguser/gpghome')key_data = open('mykeyfile.asc').read()import_result = gpg.import_keys(key_data)pprint(import_result.results) List Keys12345678910import gnupgfrom pprint import pprintgpg = gnupg.GPG(gnupghome='/home/testgpguser/gpghome')public_keys = gpg.list_keys()private_keys = gpg.list_keys(True)print 'public keys:'pprint(public_keys)print 'private keys:'pprint(private_keys) Encrypt File123456789101112import gnupggpg = gnupg.GPG(gnupghome='/home/testgpguser/gpghome')open('my-unencrypted.txt', 'w').write('You need to Google Venn diagram.')with open('my-unencrypted.txt', 'rb') as f: status = gpg.encrypt_file( f, recipients=['testgpguser@mydomain.com'], output='my-encrypted.txt.gpg' ) print 'ok: ', status.ok print 'status: ', status.status print 'stderr: ', status.stderr Decrypt File12345678import gnupggpg = gnupg.GPG(gnupghome='/home/testgpguser/gpghome')with open('my-encrypted.txt.gpg', 'rb') as f: status = gpg.decrypt_file(f, passphrase='mypassphrase', output='my-decrypted.txt') print 'ok: ', status.ok print 'status: ', status.status print 'stderr: ', status.stderr Encrypt String1234567891011import gnupggpg = gnupg.GPG(gnupghome='/home/testgpguser/gpghome')unencrypted_string = 'Who are you? How did you get in my house?'encrypted_data = gpg.encrypt(unencrypted_string, 'testgpguser@mydomain.com')encrypted_string = str(encrypted_data)print 'ok: ', encrypted_data.okprint 'status: ', encrypted_data.statusprint 'stderr: ', encrypted_data.stderrprint 'unencrypted_string: ', unencrypted_stringprint 'encrypted_string: ', encrypted_string Decrypt String123456789101112import gnupggpg = gnupg.GPG(gnupghome='/home/testgpguser/gpghome')unencrypted_string = 'Who are you? How did you get in my house?'encrypted_data = gpg.encrypt(unencrypted_string, 'testgpguser@mydomain.com')encrypted_string = str(encrypted_data)decrypted_data = gpg.decrypt(encrypted_string, passphrase='my passphrase')print 'ok: ', decrypted_data.okprint 'status: ', decrypted_data.statusprint 'stderr: ', decrypted_data.stderrprint 'decrypted string: ', decrypted_data.data Referencespython-gnupg - A Python wrapper for GnuPG — Python Wrapper for GnuPG 0.4.0 documentationPython gnupg (GPG) example - SaltyCrane Blog","categories":[],"tags":[]},{"title":"Deploy Django Using Gunicorn and Nginx","slug":"2020-10-19-deploy-django-using-gunicorn-and-nginx","date":"2020-10-19T00:06:15.000Z","updated":"2021-01-26T21:21:55.561Z","comments":true,"path":"2020/10/19/2020-10-19-deploy-django-using-gunicorn-and-nginx/","link":"","permalink":"http://zhou-en.github.io/2020/10/19/2020-10-19-deploy-django-using-gunicorn-and-nginx/","excerpt":"Install Packages from the Ubuntu Repositories for Python 31sudo apt-get install python3-pip python3-dev libpq-dev postgresql postgresql-contrib nginx","text":"Install Packages from the Ubuntu Repositories for Python 31sudo apt-get install python3-pip python3-dev libpq-dev postgresql postgresql-contrib nginx Create the PostgreSQL Database and User1sudo -u postgres psql We are setting the default encoding to UTF-8, which Django expects. We are also setting the default transaction isolation scheme to “read committed”, which blocks reads from uncommitted transactions. Lastly, we are setting the timezone. By default, our Django projects will be set to use UTC. These are all recommendations from the Django project itself: 12345CREATE USER myprojectuser WITH PASSWORD 'password';ALTER ROLE myprojectuser SET client_encoding TO 'utf8';ALTER ROLE myprojectuser SET default_transaction_isolation TO 'read committed';ALTER ROLE myprojectuser SET timezone TO 'UTC';GRANT ALL PRIVILEGES ON DATABASE myproject TO myprojectuser; Create a Python 3 Virtual Environment for your Project123456sudo -H pip3 install --upgrade pipsudo -H pip3 install virtualenvmkdir ~/myprojectcd ~/myprojectvirtualenv myprojectenvsource myprojectenv/bin/activate With your virtual environment active, install Django, Gunicorn, and the psycopg2 PostgreSQL adaptor with the local instance of pip: 1pip install django gunicorn psycopg2 Create and Configure a New Django ProjectSee: How To Set Up Django with Postgres, Nginx, and Gunicorn on Ubuntu 16.04 | DigitalOcean Create a Gunicorn systemd Service File gunicorn.service in /etc/systemd/system/123456789101112[Unit]Description=gunicorn daemonAfter=network.target[Service]User=sammyGroup=www-dataWorkingDirectory=/home/sammy/myprojectExecStart=/home/sammy/myproject/myprojectenv/bin/gunicorn --access-logfile - --workers 3 --bind unix:/home/sammy/myproject/myproject.sock myproject.wsgi:application[Install]WantedBy=multi-user.target Start and enable gunicorn on system startup 12sudo systemctl start gunicornsudo systemctl enable gunicorn Check for the Gunicorn Socket File Check gunicorn status 1sudo systemctl status gunicorn Next, check for the existence of the myproject.sock file within your project directory: 12ls /home/sammy/myprojectmanage.py myproject myprojectenv myproject.sock static View gunicorn logs 1sudo journalctl -u gunicorn If you make changes to the /etc/systemd/system/gunicorn.service file, reload the daemon to reread the service definition and restart the Gunicorn process by typing: 12sudo systemctl daemon-reloadsudo systemctl restart gunicorn Configure Nginx to Proxy Pass to Gunicorncreating and opening a new server block in Nginx’s sites-available directory:1sudo nano /etc/nginx/sites-available/myproject The comple nginx conf file1234567891011121314server { listen 80; server_name server_domain_or_IP; location = /favicon.ico { access_log off; log_not_found off; } location /static/ { root /home/sammy/myproject; } location / { include proxy_params; proxy_pass http://unix:/home/sammy/myproject/myproject.sock; }} Now, we can enable the file by linking it to the sites-enabled directory:1sudo ln -s /etc/nginx/sites-available/myproject /etc/nginx/sites-enabled Test nginx 1sudo nginx -t Restart 1sudo systemctl restart nginx Finally, we need to open up our firewall to normal traffic on port 80. Since we no longer need access to the development server, we can remove the rule to open port 8000 as well: 12sudo ufw delete allow 8000sudo ufw allow 'Nginx Full'","categories":[{"name":"DevOps","slug":"DevOps","permalink":"http://zhou-en.github.io/categories/DevOps/"}],"tags":[{"name":"Django","slug":"Django","permalink":"http://zhou-en.github.io/tags/Django/"},{"name":"Deploy","slug":"Deploy","permalink":"http://zhou-en.github.io/tags/Deploy/"},{"name":"Nginx","slug":"Nginx","permalink":"http://zhou-en.github.io/tags/Nginx/"},{"name":"Gunicorn","slug":"Gunicorn","permalink":"http://zhou-en.github.io/tags/Gunicorn/"}]},{"title":"Hello World","slug":"hello-world","date":"2019-12-11T22:00:00.000Z","updated":"2021-01-26T21:21:55.563Z","comments":true,"path":"2019/12/12/hello-world/","link":"","permalink":"http://zhou-en.github.io/2019/12/12/hello-world/","excerpt":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub.","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new \"My New Post\" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","categories":[{"name":"Quick Start","slug":"Quick-Start","permalink":"http://zhou-en.github.io/categories/Quick-Start/"}],"tags":[{"name":"Hexo","slug":"Hexo","permalink":"http://zhou-en.github.io/tags/Hexo/"}]},{"title":"Python Datetime Libs","slug":"Python-Datetime-Libs","date":"2019-10-02T00:39:57.000Z","updated":"2021-01-26T21:21:55.562Z","comments":true,"path":"2019/10/02/Python-Datetime-Libs/","link":"","permalink":"http://zhou-en.github.io/2019/10/02/Python-Datetime-Libs/","excerpt":"Python Date Time Libries: pytz, dateutil, and pendulumWrite a few paragraphs on converting UTC datetime to localized timezone datetime using the 3 libraries.","text":"Python Date Time Libries: pytz, dateutil, and pendulumWrite a few paragraphs on converting UTC datetime to localized timezone datetime using the 3 libraries. 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171172173174175176177178179180181182183184185186187188189190191192193194195196197198199200201202203204205206207208209210211212213214215216217218219220221222223224225226227228229230231232233234235236237238239240241242243244245246247248249250251import datetimefrom datetime import timedeltaimport pytzimport dateutilimport pendulum# Test scenarios# 1. Create a timezone free UTC version of now# 2. Convert that to the following zones:# - South Africa# - US Eastern# - US Pacific# - Germany# - Japan# - India (Weird 30m offset)# 3. Do the same for a specific time (2019/08/02 10:33:45+00:00)# 3. Create a zoned UTC time on the edge of several DST switch overs# 4. Check before and after times# 6. Check what happens in the DST switch period (Sunday, November 3, 2:00 am LOCAL)## Some details on DST in the US: https://www.timeanddate.com/time/change/usa# fmt = '%Y-%m-%d %H:%M:%S.%f %Z%z'fmt = '%Y-%m-%d %H:%M:%S.%f %Z%z'utc_zone = 'UTC'cat_zone = 'Africa/Johannesburg'use_zone = 'US/Eastern'ger_zone = 'Europe/Berlin'tok_zone = 'Asia/Tokyo'kol_zone = 'Asia/Kolkata'def pytz_spike(): print('pytz') print('========') # Localize timezone free UTC now now = datetime.datetime.utcnow() utc = pytz.utc cat = pytz.timezone(cat_zone) use = pytz.timezone(use_zone) ger = pytz.timezone(ger_zone) tok = pytz.timezone(tok_zone) kol = pytz.timezone(kol_zone) utc_now = utc.localize(now) cat_now = cat.localize(now) use_now = use.localize(now) ger_now = ger.localize(now) tok_now = tok.localize(now) kol_now = kol.localize(now) print(f'Localize timezone free now() to following timezone:') print(utc_now.strftime(fmt)) print(cat_now.strftime(fmt)) print(use_now.strftime(fmt)) print(ger_now.strftime(fmt)) print(tok_now.strftime(fmt)) print(kol_now.strftime(fmt)) # Localize a specific datetime, (2019/08/02 10:33:45+00:00) target_date = datetime.datetime(2019, 7, 21, 10, 33, 45) print(f'\\nLocalize (2019/08/02 10:33:45+00:00) into following timezones:') print(utc.localize(target_date).strftime(fmt)) print(cat.localize(target_date).strftime(fmt)) print(use.localize(target_date).strftime(fmt)) print(ger.localize(target_date).strftime(fmt)) print(tok.localize(target_date).strftime(fmt)) print(kol.localize(target_date).strftime(fmt)) # Before DST print(f'\\n{use_zone}: 10 January 2019, 12:34:12') use_before = datetime.datetime(2019, 1, 10, 12, 34, 12, 999999) print(use.localize(use_before).strftime(fmt)) before_dst = datetime.datetime(2019, 3, 10, 1, 30, 59, 999999) print(f'\\n{use_zone}: 2019-03-10, 02:00:00 clocks were turned forward 1 hour ') print('timezone only changes after 3:00') print(use.localize(before_dst).strftime(fmt)) minutes_added = 40 print(f'Add {minutes_added} minutes:') print(use.localize(before_dst+timedelta(minutes=minutes_added)).strftime(fmt)) before_dst = datetime.datetime(2019, 11, 3, 0, 30, 59, 999999) print(f'\\n{use_zone}: 2019-11-3, 02:00:00 clocks are turned backward 1 hour ') print('timezone only changes after 3:00') print(use.localize(before_dst).strftime(fmt)) minutes_added = 100 print(f'Add {minutes_added} minutes:') print(use.localize(before_dst + timedelta(minutes=minutes_added)).strftime(fmt)) print('\\n'+use.localize(before_dst).strftime(fmt)) minutes_added = 40 print(f'Add {minutes_added} minutes:') print(use.localize(before_dst + timedelta(minutes=minutes_added)).strftime(fmt)) after_dst = datetime.datetime(2019, 11, 3, 2, 30, 59, 999999) print(f'After DST: {use.localize(after_dst).strftime(fmt)}')def python_dateutil_spike(): print('\\ndateutil') print('========') utc = dateutil.tz.gettz(utc_zone) use = dateutil.tz.gettz(use_zone) ger = dateutil.tz.gettz(ger_zone) tok = dateutil.tz.gettz(tok_zone) kol = dateutil.tz.gettz(kol_zone) mar_10th = datetime.datetime(2019, 3, 10, 6, 30, 0, 0, tzinfo=utc) print(mar_10th.astimezone(utc).strftime(fmt)) print(mar_10th.astimezone(use).strftime(fmt) + f' {use_zone}') minutes_added = 40 print(f'Add {minutes_added} minutes') mar_10th_updated = mar_10th + timedelta(minutes=minutes_added) print(mar_10th_updated.astimezone(use).strftime(fmt) + f' {use_zone}')def pendulum_spike(): print('\\npendulum') print('========') # Localize timezone free UTC now utc_now = pendulum.utcnow() year = utc_now.year month = utc_now.month day = utc_now.day hour = utc_now.hour minute = utc_now.minute second = utc_now.second micro_sec = utc_now.microsecond \"\"\" Create datetime string, timezone free Localize the time string by adding timezones \"\"\" print('Localize UTC time now') utc = pendulum.datetime(year, month, day, hour, minute, second, micro_sec, tzinfo=utc_zone) print(f'{utc.strftime(fmt)} -\\t{utc_zone}') cat = pendulum.datetime(year, month, day, hour, minute, second, micro_sec, tzinfo=cat_zone) print(f'{cat.strftime(fmt)} -\\t{cat_zone}') use = pendulum.datetime(year, month, day, hour, minute, second, micro_sec, tzinfo=use_zone) print(f'{use.strftime(fmt)} -\\t{use_zone}') ger = pendulum.datetime(year, month, day, hour, minute, second, micro_sec, tzinfo=ger_zone) print(f'{ger.strftime(fmt)} -\\t{ger_zone}') tok = pendulum.datetime(year, month, day, hour, minute, second, micro_sec, tzinfo=tok_zone) print(f'{tok.strftime(fmt)} -\\t{tok_zone}') kol = pendulum.datetime(year, month, day, hour, minute, second, micro_sec, tzinfo=kol_zone) print(f'{kol.strftime(fmt)} -\\t{kol_zone}')############################################################################### before_dst = datetime.datetime(2019, 3, 31, 1, 59, 59, 999999) ger = pendulum.datetime( before_dst.year, before_dst.month, before_dst.day, before_dst.hour, before_dst.minute, before_dst.second, before_dst.microsecond, tzinfo=ger_zone ) print( f'\\n{ger_zone}: ' f'Sunday, 31 March 2019, 02:00:00 clocks were turned forward 1 hour' ) print(ger.strftime(fmt)) print('Add 1 microsecond') print(ger.add(microseconds=1).strftime(fmt)) before_dst = datetime.datetime(2019, 10, 27, 1, 59, 59, 999999) ger = pendulum.datetime( before_dst.year, before_dst.month, before_dst.day, before_dst.hour, before_dst.minute, before_dst.second, before_dst.microsecond, tzinfo=ger_zone ) print(f'\\n{ger_zone}: Sunday, 27 October 2019, 03:00:00 clocks are turned backward 1 hour') print(ger.strftime(fmt)) print(f'Add 85 minutes to pass 3:00') print(ger.add(minutes=85).strftime(fmt))############################################################################### before_dst = datetime.datetime(2019, 1, 10, 12, 34, 12, 999999) use = pendulum.datetime( before_dst.year, before_dst.month, before_dst.day, before_dst.hour, before_dst.minute, before_dst.second, before_dst.microsecond, tzinfo=use_zone ) print(f'\\n{use_zone}: 10 January 2019, 12:34:12') print(use.strftime(fmt)) before_dst = datetime.datetime(2019, 3, 10, 1, 30, 59, 999999) use = pendulum.datetime( before_dst.year, before_dst.month, before_dst.day, before_dst.hour, before_dst.minute, before_dst.second, before_dst.microsecond, tzinfo=use_zone ) print(f'\\n{use_zone}: Sunday, 10 March 2019, 02:00:00 clocks were turned forward 1 hour') print('Timezone starts changing after 2:00') print(use.strftime(fmt)) minutes_added = 40 print(f'Add {minutes_added} minutes:') print(use.add(minutes=minutes_added).strftime(fmt)) after_dst = datetime.datetime(2019, 4, 5, 12, 34, 12, 999999) use = pendulum.datetime( after_dst.year, after_dst.month, after_dst.day, after_dst.hour, after_dst.minute, after_dst.second, after_dst.microsecond, tzinfo=use_zone ) print(f'\\n{use_zone}: 5 April 2019, 12:34:12') print(use.strftime(fmt)) before_dst = datetime.datetime(2019, 11, 3, 0, 40, 00, 0) use = pendulum.datetime( before_dst.year, before_dst.month, before_dst.day, before_dst.hour, before_dst.minute, before_dst.second, before_dst.microsecond, tzinfo=use_zone ) print(f'\\n{use_zone}: Sunday, 3 November 2019, 02:00:00 clocks are turned backward 1 hour ') print(use.strftime(fmt)) minutes_added = 85 print(f'Add: {minutes_added} minutes') print(use.add(minutes=minutes_added).strftime(fmt)) before_dst = datetime.datetime(2019, 11, 3, 0, 40, 00, 0) use = pendulum.datetime( before_dst.year, before_dst.month, before_dst.day, before_dst.hour, before_dst.minute, before_dst.second, before_dst.microsecond, tzinfo=use_zone ) print('\\n' + use.strftime(fmt)) minutes_added = 35 print(f'Add: {minutes_added} minutes') print(use.add(minutes=minutes_added).strftime(fmt)) after_dst = datetime.datetime(2019, 11, 3, 3, 44, 12, 999999) use = pendulum.datetime( after_dst.year, after_dst.month, after_dst.day, after_dst.hour, after_dst.minute, after_dst.second, after_dst.microsecond, tzinfo=use_zone ) print(f'\\n{use_zone}: {use.strftime(fmt)}')###############################################################################if __name__ == \"__main__\": pytz_spike() python_dateutil_spike() pendulum_spike()","categories":[],"tags":[{"name":"Python","slug":"Python","permalink":"http://zhou-en.github.io/tags/Python/"},{"name":"Datetime","slug":"Datetime","permalink":"http://zhou-en.github.io/tags/Datetime/"}]},{"title":"Enable Sublime Text in Tmux Command Line on MacOS","slug":"2018-07-12-Enable-Sublime-Text-in-Tmux-Command-Line-on-MacOS","date":"2018-07-11T22:00:00.000Z","updated":"2021-01-26T21:21:55.560Z","comments":true,"path":"2018/07/12/2018-07-12-Enable-Sublime-Text-in-Tmux-Command-Line-on-MacOS/","link":"","permalink":"http://zhou-en.github.io/2018/07/12/2018-07-12-Enable-Sublime-Text-in-Tmux-Command-Line-on-MacOS/","excerpt":"Problem DescriptionWhen you create a symbolic link to start sublime text editor from command line in tmux, you get an error message: 1Unable to launch sublime text This is due to tmux doesn’t have root access to the bin directory. The following steps fixed this issue for me on my Mac.","text":"Problem DescriptionWhen you create a symbolic link to start sublime text editor from command line in tmux, you get an error message: 1Unable to launch sublime text This is due to tmux doesn’t have root access to the bin directory. The following steps fixed this issue for me on my Mac. System Details and Application OS: 1macOS Version 10.13.5 Applications: 12Sublime Text 3Tmux running from iTerm 2 Create Symbolic Link for Sublime Text 31ln -s /Applications/Sublime\\ Text.app/Contents/SharedSupport/bin/subl /usr/local/bin/subl Install a wrapper to handle subl -w in tmux1brew install reattach-to-user-namespace Add command to ~/.tmux.conf1echo \"set-option -g default-command \\\"reattach-to-user-namespace -l bash\\\"\" &gt;&gt; ~/.tmux.conf Restart the tmux server1tmux kill-server","categories":[{"name":"Text Editor","slug":"Text-Editor","permalink":"http://zhou-en.github.io/categories/Text-Editor/"},{"name":"IDE","slug":"Text-Editor/IDE","permalink":"http://zhou-en.github.io/categories/Text-Editor/IDE/"}],"tags":[{"name":"Sublime","slug":"Sublime","permalink":"http://zhou-en.github.io/tags/Sublime/"}]},{"title":"En Zhou Launches Site","slug":"2017-08-25-ZhouEn-site-launched","date":"2017-08-24T22:00:00.000Z","updated":"2021-01-26T21:21:55.559Z","comments":true,"path":"2017/08/25/2017-08-25-ZhouEn-site-launched/","link":"","permalink":"http://zhou-en.github.io/2017/08/25/2017-08-25-ZhouEn-site-launched/","excerpt":"Well. Finally got around to putting this old website together. Neat thing about it - powered by Jekyll and I can use Markdown to author my posts. It actually is a lot easier than I thought it was going to be.","text":"Well. Finally got around to putting this old website together. Neat thing about it - powered by Jekyll and I can use Markdown to author my posts. It actually is a lot easier than I thought it was going to be.","categories":[],"tags":[]}],"categories":[{"name":"DevOps","slug":"DevOps","permalink":"http://zhou-en.github.io/categories/DevOps/"},{"name":"Quick Start","slug":"Quick-Start","permalink":"http://zhou-en.github.io/categories/Quick-Start/"},{"name":"Text Editor","slug":"Text-Editor","permalink":"http://zhou-en.github.io/categories/Text-Editor/"},{"name":"IDE","slug":"Text-Editor/IDE","permalink":"http://zhou-en.github.io/categories/Text-Editor/IDE/"}],"tags":[{"name":"python","slug":"python","permalink":"http://zhou-en.github.io/tags/python/"},{"name":"Django","slug":"Django","permalink":"http://zhou-en.github.io/tags/Django/"},{"name":"Deploy","slug":"Deploy","permalink":"http://zhou-en.github.io/tags/Deploy/"},{"name":"Nginx","slug":"Nginx","permalink":"http://zhou-en.github.io/tags/Nginx/"},{"name":"Gunicorn","slug":"Gunicorn","permalink":"http://zhou-en.github.io/tags/Gunicorn/"},{"name":"Hexo","slug":"Hexo","permalink":"http://zhou-en.github.io/tags/Hexo/"},{"name":"Python","slug":"Python","permalink":"http://zhou-en.github.io/tags/Python/"},{"name":"Datetime","slug":"Datetime","permalink":"http://zhou-en.github.io/tags/Datetime/"},{"name":"Sublime","slug":"Sublime","permalink":"http://zhou-en.github.io/tags/Sublime/"}]}