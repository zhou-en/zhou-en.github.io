{"meta":{"title":"En's Blog","subtitle":"Techy blogs","description":null,"author":"En Zhou","url":"http://zhou-en.github.io","root":"/"},"pages":[{"title":"About Me","date":"2019-10-02T00:20:05.000Z","updated":"2020-10-12T09:37:34.182Z","comments":true,"path":"about/index.html","permalink":"http://zhou-en.github.io/about/index.html","excerpt":"","text":"Education 2007-2010BSc, Computer Science and Electrical Engineering; University of HomeTown (HomeTown)*Minor: Awesomeology*ExperienceYour Most Recent Work Experience: Short text containing the type of work done, results obtained,lessons learned and other remarks. Can also include lists andlinks: First item Item with link. Links will work both inthe html and pdf versions. That Other Job You Had Also with a short description. Technical ExperienceMy Cool Side ProjectFor items which don’t have a clear time ordering, a definition list can be used to have named items.* These items can also contain lists, but you need to mind the indentation levels in the markdown source. * Second item.Open SourceList open source contributions here, perhaps placing emphasis on the project names, for example the Linux Kernel, where you implemented multithreading over a long weekend, or node.js (with link) which was actually totally your idea…Programming Languagesfirst-lang: Here, we have an itemization, where we only want to add descriptions to the first few items, but still want to mention some others together at the end. A format that works well here is a description list where the first few items have their first word emphasized, and the last item contains the final few emphasized terms. Notice the reasonably nice page break in the pdf version, which wouldn’t happen if we generated the pdf via html.: second-lang: Description of your experience with second-lang, perhaps again including a [link] ref, this time placing the url reference elsewhere in the document to reduce clutter (see source file). : obscure-but-impressive-lang: We both know this one’s pushing it. : Basic knowledge of C, x86 assembly, forth, Common Lisp Extra Section, Call it Whatever You Want Human Languages: English (native speaker) ??? This is what a nested list looks like. Random tidbit Other sort of impressive-sounding thing you did"},{"title":"Categories","date":"2019-10-03T20:43:23.000Z","updated":"2020-10-12T09:37:34.182Z","comments":true,"path":"categories/index.html","permalink":"http://zhou-en.github.io/categories/index.html","excerpt":"","text":""},{"title":"Tags","date":"2019-10-03T20:43:18.000Z","updated":"2020-10-12T09:37:34.183Z","comments":true,"path":"tags/index.html","permalink":"http://zhou-en.github.io/tags/index.html","excerpt":"","text":""}],"posts":[{"title":"Install CUDA 8.0 on Linux Mint 20.04","slug":"Install-CUDA-8-0-on-Linux-Mint-20-04","date":"2020-10-12T09:49:17.000Z","updated":"2020-10-12T09:50:20.171Z","comments":true,"path":"2020/10/12/Install-CUDA-8-0-on-Linux-Mint-20-04/","link":"","permalink":"http://zhou-en.github.io/2020/10/12/Install-CUDA-8-0-on-Linux-Mint-20-04/","excerpt":"","text":"[TOC] Install gcc-4.8 for CUDA 8.0 (Optional) Remove old packages and install new ones Install gcc-4.8 and g++-4.8 (Optional) After this however, you can only access it with specifically calling for ‘gcc-4.8’ and ‘g++-4.8’. So we set them default In the case of E: Package &#39;gcc-4.8&#39; has no installation candidate Install CUDA 8.0 on Linux Mint 20.04 Unpack the .run file Copy InstallUtils.pm Export PERL5LIB Install CUDA toolkit Install Dependencies Compile and Run A Simulation Install cupy Install gcc-4.8 for CUDA 8.0(Optional) Remove old packages and install new ones1sudo apt-get remove gcc g++ Install gcc-4.8 and g++-4.81sudo apt-get install gcc-4.8 g++-4.8 build-essential (Optional) After this however, you can only access it with specifically calling for ‘gcc-4.8’ and ‘g++-4.8’. So we set them default123456sudo update-alternatives --install /usr/bin/gcc gcc /usr/bin/gcc-4.8 10sudo update-alternatives --install /usr/bin/g++ g++ /usr/bin/g++-4.8 10sudo update-alternatives --install /usr/bin/cc cc /usr/bin/gcc 30sudo update-alternatives --set cc /usr/bin/gccsudo update-alternatives --install /usr/bin/c++ c++ /usr/bin/g++ 30sudo update-alternatives --set c++ /usr/bin/g++ In the case of E: Package &#39;gcc-4.8&#39; has no installation candidate Add deb http://archive.ubuntu.com/ubuntu trusty main restricted to /etc/apt/sources.list Update teh sources list: sudo apt update Install CUDA 8.0 on Linux Mint 20.04Unpack the .run file1./cuda*.run --tar mxvf Copy InstallUtils.pm1sudo cp InstallUtils.pm /usr/lib/x86_64-linux-gnu/perl-base Export PERL5LIB1export $PERL5LIB Install CUDA toolkit1sudo ./cuda_8.0.61_375.26_linux.run --override Install Dependencies1sudo apt-get install freeglut3-dev build-essential libx11-dev libxmu-dev libxi-dev libgl1-mesa-glx libglu1-mesa libglu1-mesa-dev libglfw3-dev libgles2-mesa-dev Compile and Run A Simulation123cd ~/NVIDIA_CUDA-8.0_Samples/5_Simulations/nbodyGLPATH=/usr/lib make./nbody Install cupySince the CUDA version installed is 8.0, 1pip install cupy-cuda80","categories":[],"tags":[]},{"title":"Hello World","slug":"hello-world","date":"2020-10-12T09:37:34.181Z","updated":"2020-10-12T09:37:34.182Z","comments":true,"path":"2020/10/12/hello-world/","link":"","permalink":"http://zhou-en.github.io/2020/10/12/hello-world/","excerpt":"","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new \"My New Post\" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","categories":[{"name":"Quick Start","slug":"Quick-Start","permalink":"http://zhou-en.github.io/categories/Quick-Start/"}],"tags":[{"name":"Hexo","slug":"Hexo","permalink":"http://zhou-en.github.io/tags/Hexo/"}]},{"title":"Python Datetime Libs","slug":"Python-Datetime-Libs","date":"2019-10-02T00:39:57.000Z","updated":"2020-10-12T09:37:34.181Z","comments":true,"path":"2019/10/02/Python-Datetime-Libs/","link":"","permalink":"http://zhou-en.github.io/2019/10/02/Python-Datetime-Libs/","excerpt":"","text":"Python Date Time Libries: pytz, dateutil, and pendulumWrite a few paragraphs on converting UTC datetime to localized timezone datetime using the 3 libraries. 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171172173174175176177178179180181182183184185186187188189190191192193194195196197198199200201202203204205206207208209210211212213214215216217218219220221222223224225226227228229230231232233234235236237238239240241242243244245246247248249250import datetimefrom datetime import timedeltaimport pytzimport dateutilimport pendulum# Test scenarios# 1. Create a timezone free UTC version of now# 2. Convert that to the following zones:# - South Africa# - US Eastern# - US Pacific# - Germany# - Japan# - India (Weird 30m offset)# 3. Do the same for a specific time (2019/08/02 10:33:45+00:00)# 3. Create a zoned UTC time on the edge of several DST switch overs# 4. Check before and after times# 6. Check what happens in the DST switch period (Sunday, November 3, 2:00 am LOCAL)## Some details on DST in the US: https://www.timeanddate.com/time/change/usa# fmt = '%Y-%m-%d %H:%M:%S.%f %Z%z'fmt = '%Y-%m-%d %H:%M:%S.%f %Z%z'utc_zone = 'UTC'cat_zone = 'Africa/Johannesburg'use_zone = 'US/Eastern'ger_zone = 'Europe/Berlin'tok_zone = 'Asia/Tokyo'kol_zone = 'Asia/Kolkata'def pytz_spike(): print('pytz') print('========') # Localize timezone free UTC now now = datetime.datetime.utcnow() utc = pytz.utc cat = pytz.timezone(cat_zone) use = pytz.timezone(use_zone) ger = pytz.timezone(ger_zone) tok = pytz.timezone(tok_zone) kol = pytz.timezone(kol_zone) utc_now = utc.localize(now) cat_now = cat.localize(now) use_now = use.localize(now) ger_now = ger.localize(now) tok_now = tok.localize(now) kol_now = kol.localize(now) print(f'Localize timezone free now() to following timezone:') print(utc_now.strftime(fmt)) print(cat_now.strftime(fmt)) print(use_now.strftime(fmt)) print(ger_now.strftime(fmt)) print(tok_now.strftime(fmt)) print(kol_now.strftime(fmt)) # Localize a specific datetime, (2019/08/02 10:33:45+00:00) target_date = datetime.datetime(2019, 7, 21, 10, 33, 45) print(f'\\nLocalize (2019/08/02 10:33:45+00:00) into following timezones:') print(utc.localize(target_date).strftime(fmt)) print(cat.localize(target_date).strftime(fmt)) print(use.localize(target_date).strftime(fmt)) print(ger.localize(target_date).strftime(fmt)) print(tok.localize(target_date).strftime(fmt)) print(kol.localize(target_date).strftime(fmt)) # Before DST print(f'\\n&#123;use_zone&#125;: 10 January 2019, 12:34:12') use_before = datetime.datetime(2019, 1, 10, 12, 34, 12, 999999) print(use.localize(use_before).strftime(fmt)) before_dst = datetime.datetime(2019, 3, 10, 1, 30, 59, 999999) print(f'\\n&#123;use_zone&#125;: 2019-03-10, 02:00:00 clocks were turned forward 1 hour ') print('timezone only changes after 3:00') print(use.localize(before_dst).strftime(fmt)) minutes_added = 40 print(f'Add &#123;minutes_added&#125; minutes:') print(use.localize(before_dst+timedelta(minutes=minutes_added)).strftime(fmt)) before_dst = datetime.datetime(2019, 11, 3, 0, 30, 59, 999999) print(f'\\n&#123;use_zone&#125;: 2019-11-3, 02:00:00 clocks are turned backward 1 hour ') print('timezone only changes after 3:00') print(use.localize(before_dst).strftime(fmt)) minutes_added = 100 print(f'Add &#123;minutes_added&#125; minutes:') print(use.localize(before_dst + timedelta(minutes=minutes_added)).strftime(fmt)) print('\\n'+use.localize(before_dst).strftime(fmt)) minutes_added = 40 print(f'Add &#123;minutes_added&#125; minutes:') print(use.localize(before_dst + timedelta(minutes=minutes_added)).strftime(fmt)) after_dst = datetime.datetime(2019, 11, 3, 2, 30, 59, 999999) print(f'After DST: &#123;use.localize(after_dst).strftime(fmt)&#125;')def python_dateutil_spike(): print('\\ndateutil') print('========') utc = dateutil.tz.gettz(utc_zone) use = dateutil.tz.gettz(use_zone) ger = dateutil.tz.gettz(ger_zone) tok = dateutil.tz.gettz(tok_zone) kol = dateutil.tz.gettz(kol_zone) mar_10th = datetime.datetime(2019, 3, 10, 6, 30, 0, 0, tzinfo=utc) print(mar_10th.astimezone(utc).strftime(fmt)) print(mar_10th.astimezone(use).strftime(fmt) + f' &#123;use_zone&#125;') minutes_added = 40 print(f'Add &#123;minutes_added&#125; minutes') mar_10th_updated = mar_10th + timedelta(minutes=minutes_added) print(mar_10th_updated.astimezone(use).strftime(fmt) + f' &#123;use_zone&#125;')def pendulum_spike(): print('\\npendulum') print('========') # Localize timezone free UTC now utc_now = pendulum.utcnow() year = utc_now.year month = utc_now.month day = utc_now.day hour = utc_now.hour minute = utc_now.minute second = utc_now.second micro_sec = utc_now.microsecond \"\"\" Create datetime string, timezone free Localize the time string by adding timezones \"\"\" print('Localize UTC time now') utc = pendulum.datetime(year, month, day, hour, minute, second, micro_sec, tzinfo=utc_zone) print(f'&#123;utc.strftime(fmt)&#125; -\\t&#123;utc_zone&#125;') cat = pendulum.datetime(year, month, day, hour, minute, second, micro_sec, tzinfo=cat_zone) print(f'&#123;cat.strftime(fmt)&#125; -\\t&#123;cat_zone&#125;') use = pendulum.datetime(year, month, day, hour, minute, second, micro_sec, tzinfo=use_zone) print(f'&#123;use.strftime(fmt)&#125; -\\t&#123;use_zone&#125;') ger = pendulum.datetime(year, month, day, hour, minute, second, micro_sec, tzinfo=ger_zone) print(f'&#123;ger.strftime(fmt)&#125; -\\t&#123;ger_zone&#125;') tok = pendulum.datetime(year, month, day, hour, minute, second, micro_sec, tzinfo=tok_zone) print(f'&#123;tok.strftime(fmt)&#125; -\\t&#123;tok_zone&#125;') kol = pendulum.datetime(year, month, day, hour, minute, second, micro_sec, tzinfo=kol_zone) print(f'&#123;kol.strftime(fmt)&#125; -\\t&#123;kol_zone&#125;')############################################################################### before_dst = datetime.datetime(2019, 3, 31, 1, 59, 59, 999999) ger = pendulum.datetime( before_dst.year, before_dst.month, before_dst.day, before_dst.hour, before_dst.minute, before_dst.second, before_dst.microsecond, tzinfo=ger_zone ) print( f'\\n&#123;ger_zone&#125;: ' f'Sunday, 31 March 2019, 02:00:00 clocks were turned forward 1 hour' ) print(ger.strftime(fmt)) print('Add 1 microsecond') print(ger.add(microseconds=1).strftime(fmt)) before_dst = datetime.datetime(2019, 10, 27, 1, 59, 59, 999999) ger = pendulum.datetime( before_dst.year, before_dst.month, before_dst.day, before_dst.hour, before_dst.minute, before_dst.second, before_dst.microsecond, tzinfo=ger_zone ) print(f'\\n&#123;ger_zone&#125;: Sunday, 27 October 2019, 03:00:00 clocks are turned backward 1 hour') print(ger.strftime(fmt)) print(f'Add 85 minutes to pass 3:00') print(ger.add(minutes=85).strftime(fmt))############################################################################### before_dst = datetime.datetime(2019, 1, 10, 12, 34, 12, 999999) use = pendulum.datetime( before_dst.year, before_dst.month, before_dst.day, before_dst.hour, before_dst.minute, before_dst.second, before_dst.microsecond, tzinfo=use_zone ) print(f'\\n&#123;use_zone&#125;: 10 January 2019, 12:34:12') print(use.strftime(fmt)) before_dst = datetime.datetime(2019, 3, 10, 1, 30, 59, 999999) use = pendulum.datetime( before_dst.year, before_dst.month, before_dst.day, before_dst.hour, before_dst.minute, before_dst.second, before_dst.microsecond, tzinfo=use_zone ) print(f'\\n&#123;use_zone&#125;: Sunday, 10 March 2019, 02:00:00 clocks were turned forward 1 hour') print('Timezone starts changing after 2:00') print(use.strftime(fmt)) minutes_added = 40 print(f'Add &#123;minutes_added&#125; minutes:') print(use.add(minutes=minutes_added).strftime(fmt)) after_dst = datetime.datetime(2019, 4, 5, 12, 34, 12, 999999) use = pendulum.datetime( after_dst.year, after_dst.month, after_dst.day, after_dst.hour, after_dst.minute, after_dst.second, after_dst.microsecond, tzinfo=use_zone ) print(f'\\n&#123;use_zone&#125;: 5 April 2019, 12:34:12') print(use.strftime(fmt)) before_dst = datetime.datetime(2019, 11, 3, 0, 40, 00, 0) use = pendulum.datetime( before_dst.year, before_dst.month, before_dst.day, before_dst.hour, before_dst.minute, before_dst.second, before_dst.microsecond, tzinfo=use_zone ) print(f'\\n&#123;use_zone&#125;: Sunday, 3 November 2019, 02:00:00 clocks are turned backward 1 hour ') print(use.strftime(fmt)) minutes_added = 85 print(f'Add: &#123;minutes_added&#125; minutes') print(use.add(minutes=minutes_added).strftime(fmt)) before_dst = datetime.datetime(2019, 11, 3, 0, 40, 00, 0) use = pendulum.datetime( before_dst.year, before_dst.month, before_dst.day, before_dst.hour, before_dst.minute, before_dst.second, before_dst.microsecond, tzinfo=use_zone ) print('\\n' + use.strftime(fmt)) minutes_added = 35 print(f'Add: &#123;minutes_added&#125; minutes') print(use.add(minutes=minutes_added).strftime(fmt)) after_dst = datetime.datetime(2019, 11, 3, 3, 44, 12, 999999) use = pendulum.datetime( after_dst.year, after_dst.month, after_dst.day, after_dst.hour, after_dst.minute, after_dst.second, after_dst.microsecond, tzinfo=use_zone ) print(f'\\n&#123;use_zone&#125;: &#123;use.strftime(fmt)&#125;')###############################################################################if __name__ == \"__main__\": pytz_spike() python_dateutil_spike() pendulum_spike()","categories":[],"tags":[{"name":"Python","slug":"Python","permalink":"http://zhou-en.github.io/tags/Python/"},{"name":"Datetime","slug":"Datetime","permalink":"http://zhou-en.github.io/tags/Datetime/"}]},{"title":"Deploy A Django Service to a Remote VM","slug":"Deploy-A-Django-Service-to-a-Remote-VM","date":"2019-10-02T00:25:54.000Z","updated":"2020-10-12T09:37:34.181Z","comments":true,"path":"2019/10/02/Deploy-A-Django-Service-to-a-Remote-VM/","link":"","permalink":"http://zhou-en.github.io/2019/10/02/Deploy-A-Django-Service-to-a-Remote-VM/","excerpt":"","text":"Create an User on remote VM login to the remote vm run: adduser username add password and details add the user to sudo group: adduser username sudo Update remote VM hostname set new hostname: hostnamectl set-hostname new_hostname update the /etc/hosts file: open the file with vim: vim /etc/hosts add this line vm_ip_address new_hostname right below 127.0.0.1 localhost Enable ssh Key Based Login create a directory on the remote vm: mkdir -p ~/.ssh generate ssh-key on local machine: ssh-keygen -b 4096 copy the public key to the remote vm: scp ~/.ssh/id_rsa.pub username@remote_vm_ip:~/.ssh/authorized_keys login to the vm give 700 permission to the .ssh directory give 600 permissions to the contents inside .ssh directory Update ssh Permissions login to the remote vm open /etc/ssh/sshd_config with root access Set PermitRootLogin to no Set PasswordAuthentication to no Restart ssh service: sudo systemctl restart sshd Setup Firewall: only allow incoming traffic on port 8000 and ssh sudo apt-get install ufw sudo ufw default allow outgoing sudo ufw default deny incoming sudo ufw allow ssh sudo ufw allow 8000 sudo ufw enable, yes sudo ufw status Prep Django App for Deployment activate virtual environment run pip freeze &gt; requirements.txt to create requirements file for the virtual enirment copy the project folder to the vm server install sudo apt-get install python3-pip python3-venv on the vm create virtual environment: python3 -m venv django_project/venv activate the virtual environment install requirement: pip install -r requirements.txt Update Django Settings in settings.py1.open settings.py2.update ALLOWD_HOSTS to include your VM’s IP3.update STATIC_ROOT = os.path.join(BASE_DIR, &#39;static&#39;)4.run python manage.py collectstatic to create and copy static files to static directory5.python manage.py runserver 0.0.0.0:8000 Add Django Service to Apache Install apache: sudo apt install apache2 Install apache python lib: sudo apt install libapache2-mod-wsgi-py3 Configure apache2 services in /ect/apache2/sites-available Make a copy of the config file in the config directory: sudo cp 000-default.conf django_project.conf Update the config file: Add rules right before &lt;/VirtualHost&gt;: 12345678910111213141516171819Alias /static /home/username/django_project_dir/static&lt;Directory /home/username/django_project_dir/static&gt; Require all granted&lt;/Directory&gt;Alias /media /home/username/django_project_dir/media&lt;Directory /home/username/django_project_dir/media&gt; Require all granted&lt;/Directory&gt;&lt;Directory /home/username/django_project_dir/project_dir&gt; &lt;Files wsgi.py&gt; Require all granted &lt;/Files&gt;&lt;/Directory&gt;WSGIScriptAlias / /home/username/django_project_dir/django_project/wsgi.pyWSGIDaemonProcess django_app python-path=/home/username/django_project/venvWSGIProcessGroup django_app Enable the site from apache: sudo a2ensite django_project Disable the default site: sudo a2dissite 000-default.conf Update permission on database and media: sudo chown :www-data django_project/db.sqlite3 sudo chmod 664 django_project/db.sqlite3 sudo chown :www-data django_project Update permission on the project folder: 12sudo chown -R :www-data django_project/sudo chmod -R 775 django_project/ Create config file in /etc called config.json or app_config.json Copy the SECRET_KEY from the project settings.py to the app_config.json 12345&#123; &quot;SECRET_KEY&quot;: &quot;SOME KEYS&quot;, &quot;EMAIL_USER&quot;: &quot;your email username&quot;, &quot;EMAIL_PASS&quot;: &quot;your email password&quot;&#125; Update the settings.py with following code to load secret key: 123456789import jsonwith open(&apos;/etc/app_config.json&apos;) as config_file: config = json.load(config_file) SECRET_KEY = config[&apos;SECRET_KEY&apos;]DEBUG = FalseEMAIL_HOST_USER = config.get(&apos;EMAIL_USER&apos;)EMAIL_HOST_PASS = config.get(&apos;EMAIL_PASS&apos;) Update Traffic Rules sudo ufw delete allow 8000 sudo ufw allow http/tcp restart apache server: sudo service apache2 restart Deployment checklist","categories":[{"name":"Deployment","slug":"Deployment","permalink":"http://zhou-en.github.io/categories/Deployment/"}],"tags":[{"name":"Django","slug":"Django","permalink":"http://zhou-en.github.io/tags/Django/"},{"name":"Docker","slug":"Docker","permalink":"http://zhou-en.github.io/tags/Docker/"},{"name":"Container","slug":"Container","permalink":"http://zhou-en.github.io/tags/Container/"}]},{"title":"Enable Sublime Text in Tmux Command Line on MacOS","slug":"2018-07-12-Enable-Sublime-Text-in-Tmux-Command-Line-on-MacOS","date":"2018-07-11T22:00:00.000Z","updated":"2020-10-12T09:37:34.181Z","comments":true,"path":"2018/07/12/2018-07-12-Enable-Sublime-Text-in-Tmux-Command-Line-on-MacOS/","link":"","permalink":"http://zhou-en.github.io/2018/07/12/2018-07-12-Enable-Sublime-Text-in-Tmux-Command-Line-on-MacOS/","excerpt":"","text":"Problem DescriptionWhen you create a symbolic link to start sublime text editor from command line in tmux, you get an error message: 1Unable to launch sublime text This is due to tmux doesn’t have root access to the bin directory. The following steps fixed this issue for me on my Mac. System Details and Application OS: 1macOS Version 10.13.5 Applications: 12Sublime Text 3Tmux running from iTerm 2 Create Symbolic Link for Sublime Text 31ln -s /Applications/Sublime\\ Text.app/Contents/SharedSupport/bin/subl /usr/local/bin/subl Install a wrapper to handle subl -w in tmux1brew install reattach-to-user-namespace Add command to ~/.tmux.conf1echo \"set-option -g default-command \\\"reattach-to-user-namespace -l bash\\\"\" &gt;&gt; ~/.tmux.conf Restart the tmux server1tmux kill-server","categories":[{"name":"Text Editor","slug":"Text-Editor","permalink":"http://zhou-en.github.io/categories/Text-Editor/"},{"name":"IDE","slug":"Text-Editor/IDE","permalink":"http://zhou-en.github.io/categories/Text-Editor/IDE/"}],"tags":[{"name":"Sublime","slug":"Sublime","permalink":"http://zhou-en.github.io/tags/Sublime/"}]},{"title":"The 2nd Post","slug":"2017-09-14-Another-post","date":"2017-09-13T22:00:00.000Z","updated":"2020-10-12T09:37:34.180Z","comments":true,"path":"2017/09/14/2017-09-14-Another-post/","link":"","permalink":"http://zhou-en.github.io/2017/09/14/2017-09-14-Another-post/","excerpt":"","text":"Let’s how the multiple posts look like.","categories":[],"tags":[]},{"title":"En Zhou Launches Site","slug":"2017-08-25-ZhouEn-site-launched","date":"2017-08-24T22:00:00.000Z","updated":"2020-10-12T09:37:34.180Z","comments":true,"path":"2017/08/25/2017-08-25-ZhouEn-site-launched/","link":"","permalink":"http://zhou-en.github.io/2017/08/25/2017-08-25-ZhouEn-site-launched/","excerpt":"","text":"Well. Finally got around to putting this old website together. Neat thing about it - powered by Jekyll and I can use Markdown to author my posts. It actually is a lot easier than I thought it was going to be.","categories":[],"tags":[]}]}