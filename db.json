{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[],"Cache":[{"_id":"source/_posts/2017-08-25-ZhouEn-site-launched.md","hash":"33a740169f5647824bde67121ccbbdea089277fd","modified":1602495454180},{"_id":"source/_posts/2017-09-14-Another-post.md","hash":"d2ecc551edb6dc4be807ac7b6245f2b70639e300","modified":1602495454180},{"_id":"source/_posts/2018-07-12-Enable-Sublime-Text-in-Tmux-Command-Line-on-MacOS.md","hash":"f524c92ec37ca8c63bc4a1e69f1ff7061fc5cfe2","modified":1602495454181},{"_id":"source/_posts/2020-10-12-Install-CUDA-8.0-on-Linux-Mint-20.04","hash":"353b163fccb88db5c725277d987ed691fb6564d0","modified":1602495494721},{"_id":"source/_posts/Deploy-A-Django-Service-to-a-Remote-VM.md","hash":"acc76d9a6b78c396d4bdcc20319588593bd08a33","modified":1602495454181},{"_id":"source/_posts/Python-Datetime-Libs.md","hash":"c55d3ac928f7c51d2f328c77cef08844fb673866","modified":1602495454181},{"_id":"source/_posts/hello-world.md","hash":"105fafdf0dec047049d42942ec3e07db95358c7b","modified":1602495454182},{"_id":"source/about/index.md","hash":"fb20f51fea571b0fb1b5c56b352f32b0d1f28f0b","modified":1602495454182},{"_id":"source/categories/index.md","hash":"2dd4967462db28921a32d825b46daa7b2fdd6131","modified":1602495454182},{"_id":"source/tags/index.md","hash":"bfa82fb35420f2f17c615a42e358e184a598b439","modified":1602495454183}],"Category":[{"name":"Text Editor","_id":"ckg6cknqu00063z8aerorexmq"},{"name":"Deployment","_id":"ckg6cknr6000b3z8a6unod0nk"},{"name":"Quick Start","_id":"ckg6cknr7000e3z8akpwnh01v"},{"name":"IDE","parent":"ckg6cknqu00063z8aerorexmq","_id":"ckg6cknr8000h3z8a4i4ip9ep"}],"Data":[],"Page":[{"title":"About Me","date":"2019-10-02T00:20:05.000Z","type":"about","_content":"\n<!--\n-------------------     ----------------------------\nMyAddress                        email@example.com\nMyTown 1000                          @twitter_handle\nMyCountry                           1800 my-phone-nr\n-------------------     ---------------------------- \n-->\n\nEducation\n---------\n<!-- \n2010-2014 (expected)\n:   **PhD, Computer Science**; Awesome University (MyTown)\n\n    *Thesis title: Deep Learning Approaches to the Self-Awesomeness\n     Estimation Problem* -->\n\n2007-2010\n:   **BSc, Computer Science and Electrical Engineering**; University of\n    HomeTown (HomeTown)\n\n    *Minor: Awesomeology*\n\nExperience\n----------\n\n**Your Most Recent Work Experience:**\n\nShort text containing the type of work done, results obtained,\nlessons learned and other remarks. Can also include lists and\nlinks:\n\n* First item\n\n* Item with [link](http://www.example.com). Links will work both in\n  the html and pdf versions.\n\n**That Other Job You Had**\n\nAlso with a short description.\n\nTechnical Experience\n--------------------\n\nMy Cool Side Project\n:   For items which don't have a clear time ordering, a definition\n    list can be used to have named items.\n\n    * These items can also contain lists, but you need to mind the\n      indentation levels in the markdown source.\n    * Second item.\n\nOpen Source\n:   List open source contributions here, perhaps placing emphasis on\n    the project names, for example the **Linux Kernel**, where you\n    implemented multithreading over a long weekend, or **node.js**\n    (with [link](http://nodejs.org)) which was actually totally\n    your idea...\n\nProgramming Languages\n:   **first-lang:** Here, we have an itemization, where we only want\n    to add descriptions to the first few items, but still want to\n    mention some others together at the end. A format that works well\n    here is a description list where the first few items have their\n    first word emphasized, and the last item contains the final few\n    emphasized terms. Notice the reasonably nice page break in the pdf\n    version, which wouldn't happen if we generated the pdf via html.\n\n:   **second-lang:** Description of your experience with second-lang,\n    perhaps again including a [link] [ref], this time placing the url\n    reference elsewhere in the document to reduce clutter (see source\n    file). \n\n:   **obscure-but-impressive-lang:** We both know this one's pushing\n    it.\n\n:   Basic knowledge of **C**, **x86 assembly**, **forth**, **Common Lisp**\n\n[ref]: https://github.com/githubuser/superlongprojectname\n\nExtra Section, Call it Whatever You Want\n----------------------------------------\n\n* Human Languages:\n\n     * English (native speaker)\n     * ???\n     * This is what a nested list looks like.\n\n* Random tidbit\n\n* Other sort of impressive-sounding thing you did\n","source":"about/index.md","raw":"---\ntitle: About Me\ndate: 2019-10-02 02:20:05\ntype: \"about\"\n---\n\n<!--\n-------------------     ----------------------------\nMyAddress                        email@example.com\nMyTown 1000                          @twitter_handle\nMyCountry                           1800 my-phone-nr\n-------------------     ---------------------------- \n-->\n\nEducation\n---------\n<!-- \n2010-2014 (expected)\n:   **PhD, Computer Science**; Awesome University (MyTown)\n\n    *Thesis title: Deep Learning Approaches to the Self-Awesomeness\n     Estimation Problem* -->\n\n2007-2010\n:   **BSc, Computer Science and Electrical Engineering**; University of\n    HomeTown (HomeTown)\n\n    *Minor: Awesomeology*\n\nExperience\n----------\n\n**Your Most Recent Work Experience:**\n\nShort text containing the type of work done, results obtained,\nlessons learned and other remarks. Can also include lists and\nlinks:\n\n* First item\n\n* Item with [link](http://www.example.com). Links will work both in\n  the html and pdf versions.\n\n**That Other Job You Had**\n\nAlso with a short description.\n\nTechnical Experience\n--------------------\n\nMy Cool Side Project\n:   For items which don't have a clear time ordering, a definition\n    list can be used to have named items.\n\n    * These items can also contain lists, but you need to mind the\n      indentation levels in the markdown source.\n    * Second item.\n\nOpen Source\n:   List open source contributions here, perhaps placing emphasis on\n    the project names, for example the **Linux Kernel**, where you\n    implemented multithreading over a long weekend, or **node.js**\n    (with [link](http://nodejs.org)) which was actually totally\n    your idea...\n\nProgramming Languages\n:   **first-lang:** Here, we have an itemization, where we only want\n    to add descriptions to the first few items, but still want to\n    mention some others together at the end. A format that works well\n    here is a description list where the first few items have their\n    first word emphasized, and the last item contains the final few\n    emphasized terms. Notice the reasonably nice page break in the pdf\n    version, which wouldn't happen if we generated the pdf via html.\n\n:   **second-lang:** Description of your experience with second-lang,\n    perhaps again including a [link] [ref], this time placing the url\n    reference elsewhere in the document to reduce clutter (see source\n    file). \n\n:   **obscure-but-impressive-lang:** We both know this one's pushing\n    it.\n\n:   Basic knowledge of **C**, **x86 assembly**, **forth**, **Common Lisp**\n\n[ref]: https://github.com/githubuser/superlongprojectname\n\nExtra Section, Call it Whatever You Want\n----------------------------------------\n\n* Human Languages:\n\n     * English (native speaker)\n     * ???\n     * This is what a nested list looks like.\n\n* Random tidbit\n\n* Other sort of impressive-sounding thing you did\n","updated":"2020-10-12T09:37:34.182Z","path":"about/index.html","comments":1,"layout":"page","_id":"ckg6cknql00013z8amba1fcqx","content":"<!--\n-------------------     ----------------------------\nMyAddress                        email@example.com\nMyTown 1000                          @twitter_handle\nMyCountry                           1800 my-phone-nr\n-------------------     ---------------------------- \n-->\n\n<h2 id=\"Education\"><a href=\"#Education\" class=\"headerlink\" title=\"Education\"></a>Education</h2><!-- \n2010-2014 (expected)\n:   **PhD, Computer Science**; Awesome University (MyTown)\n\n    *Thesis title: Deep Learning Approaches to the Self-Awesomeness\n     Estimation Problem* -->\n\n<dl><dt>2007-2010</dt><dd><strong>BSc, Computer Science and Electrical Engineering</strong>; University of<br>    HomeTown (HomeTown)</dd></dl><pre><code>*Minor: Awesomeology*</code></pre><h2 id=\"Experience\"><a href=\"#Experience\" class=\"headerlink\" title=\"Experience\"></a>Experience</h2><p><strong>Your Most Recent Work Experience:</strong></p>\n<p>Short text containing the type of work done, results obtained,<br>lessons learned and other remarks. Can also include lists and<br>links:</p>\n<ul>\n<li><p>First item</p>\n</li>\n<li><p>Item with <a href=\"http://www.example.com\" target=\"_blank\" rel=\"noopener\">link</a>. Links will work both in<br>the html and pdf versions.</p>\n</li>\n</ul>\n<p><strong>That Other Job You Had</strong></p>\n<p>Also with a short description.</p>\n<h2 id=\"Technical-Experience\"><a href=\"#Technical-Experience\" class=\"headerlink\" title=\"Technical Experience\"></a>Technical Experience</h2><dl><dt>My Cool Side Project</dt><dd>For items which don’t have a clear time ordering, a definition<br>    list can be used to have named items.</dd></dl><pre><code>* These items can also contain lists, but you need to mind the\n  indentation levels in the markdown source.\n* Second item.</code></pre><dl><dt>Open Source</dt><dd>List open source contributions here, perhaps placing emphasis on<br>    the project names, for example the <strong>Linux Kernel</strong>, where you<br>    implemented multithreading over a long weekend, or <strong>node.js</strong><br>    (with <a href=\"http://nodejs.org\" target=\"_blank\" rel=\"noopener\">link</a>) which was actually totally<br>    your idea…</dd></dl><dl><dt>Programming Languages</dt><dd><strong>first-lang:</strong> Here, we have an itemization, where we only want<br>    to add descriptions to the first few items, but still want to<br>    mention some others together at the end. A format that works well<br>    here is a description list where the first few items have their<br>    first word emphasized, and the last item contains the final few<br>    emphasized terms. Notice the reasonably nice page break in the pdf<br>    version, which wouldn’t happen if we generated the pdf via html.</dd></dl><p>:   <strong>second-lang:</strong> Description of your experience with second-lang,<br>    perhaps again including a [link] <a href=\"https://github.com/githubuser/superlongprojectname\" target=\"_blank\" rel=\"noopener\">ref</a>, this time placing the url<br>    reference elsewhere in the document to reduce clutter (see source<br>    file). </p>\n<p>:   <strong>obscure-but-impressive-lang:</strong> We both know this one’s pushing<br>    it.</p>\n<p>:   Basic knowledge of <strong>C</strong>, <strong>x86 assembly</strong>, <strong>forth</strong>, <strong>Common Lisp</strong></p>\n<h2 id=\"Extra-Section-Call-it-Whatever-You-Want\"><a href=\"#Extra-Section-Call-it-Whatever-You-Want\" class=\"headerlink\" title=\"Extra Section, Call it Whatever You Want\"></a>Extra Section, Call it Whatever You Want</h2><ul>\n<li><p>Human Languages:</p>\n<ul>\n<li>English (native speaker)</li>\n<li>???</li>\n<li>This is what a nested list looks like.</li>\n</ul>\n</li>\n<li><p>Random tidbit</p>\n</li>\n<li><p>Other sort of impressive-sounding thing you did</p>\n</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<!--\n-------------------     ----------------------------\nMyAddress                        email@example.com\nMyTown 1000                          @twitter_handle\nMyCountry                           1800 my-phone-nr\n-------------------     ---------------------------- \n-->\n\n<h2 id=\"Education\"><a href=\"#Education\" class=\"headerlink\" title=\"Education\"></a>Education</h2><!-- \n2010-2014 (expected)\n:   **PhD, Computer Science**; Awesome University (MyTown)\n\n    *Thesis title: Deep Learning Approaches to the Self-Awesomeness\n     Estimation Problem* -->\n\n<dl><dt>2007-2010</dt><dd><strong>BSc, Computer Science and Electrical Engineering</strong>; University of<br>    HomeTown (HomeTown)</dd></dl><pre><code>*Minor: Awesomeology*</code></pre><h2 id=\"Experience\"><a href=\"#Experience\" class=\"headerlink\" title=\"Experience\"></a>Experience</h2><p><strong>Your Most Recent Work Experience:</strong></p>\n<p>Short text containing the type of work done, results obtained,<br>lessons learned and other remarks. Can also include lists and<br>links:</p>\n<ul>\n<li><p>First item</p>\n</li>\n<li><p>Item with <a href=\"http://www.example.com\" target=\"_blank\" rel=\"noopener\">link</a>. Links will work both in<br>the html and pdf versions.</p>\n</li>\n</ul>\n<p><strong>That Other Job You Had</strong></p>\n<p>Also with a short description.</p>\n<h2 id=\"Technical-Experience\"><a href=\"#Technical-Experience\" class=\"headerlink\" title=\"Technical Experience\"></a>Technical Experience</h2><dl><dt>My Cool Side Project</dt><dd>For items which don’t have a clear time ordering, a definition<br>    list can be used to have named items.</dd></dl><pre><code>* These items can also contain lists, but you need to mind the\n  indentation levels in the markdown source.\n* Second item.</code></pre><dl><dt>Open Source</dt><dd>List open source contributions here, perhaps placing emphasis on<br>    the project names, for example the <strong>Linux Kernel</strong>, where you<br>    implemented multithreading over a long weekend, or <strong>node.js</strong><br>    (with <a href=\"http://nodejs.org\" target=\"_blank\" rel=\"noopener\">link</a>) which was actually totally<br>    your idea…</dd></dl><dl><dt>Programming Languages</dt><dd><strong>first-lang:</strong> Here, we have an itemization, where we only want<br>    to add descriptions to the first few items, but still want to<br>    mention some others together at the end. A format that works well<br>    here is a description list where the first few items have their<br>    first word emphasized, and the last item contains the final few<br>    emphasized terms. Notice the reasonably nice page break in the pdf<br>    version, which wouldn’t happen if we generated the pdf via html.</dd></dl><p>:   <strong>second-lang:</strong> Description of your experience with second-lang,<br>    perhaps again including a [link] <a href=\"https://github.com/githubuser/superlongprojectname\" target=\"_blank\" rel=\"noopener\">ref</a>, this time placing the url<br>    reference elsewhere in the document to reduce clutter (see source<br>    file). </p>\n<p>:   <strong>obscure-but-impressive-lang:</strong> We both know this one’s pushing<br>    it.</p>\n<p>:   Basic knowledge of <strong>C</strong>, <strong>x86 assembly</strong>, <strong>forth</strong>, <strong>Common Lisp</strong></p>\n<h2 id=\"Extra-Section-Call-it-Whatever-You-Want\"><a href=\"#Extra-Section-Call-it-Whatever-You-Want\" class=\"headerlink\" title=\"Extra Section, Call it Whatever You Want\"></a>Extra Section, Call it Whatever You Want</h2><ul>\n<li><p>Human Languages:</p>\n<ul>\n<li>English (native speaker)</li>\n<li>???</li>\n<li>This is what a nested list looks like.</li>\n</ul>\n</li>\n<li><p>Random tidbit</p>\n</li>\n<li><p>Other sort of impressive-sounding thing you did</p>\n</li>\n</ul>\n"},{"title":"Categories","date":"2019-10-03T20:43:23.000Z","type":"categories","_content":"","source":"categories/index.md","raw":"---\ntitle: Categories\ndate: 2019-10-03 22:43:23\ntype: categories\n---\n","updated":"2020-10-12T09:37:34.182Z","path":"categories/index.html","comments":1,"layout":"page","_id":"ckg6cknqo00033z8aj8zgc5q1","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"Tags","date":"2019-10-03T20:43:18.000Z","type":"tags","_content":"","source":"tags/index.md","raw":"---\ntitle: Tags\ndate: 2019-10-03 22:43:18\ntype: tags\n---\n","updated":"2020-10-12T09:37:34.183Z","path":"tags/index.html","comments":1,"layout":"page","_id":"ckg6cknqr00053z8acge43k3e","content":"","site":{"data":{}},"excerpt":"","more":""}],"Post":[{"layout":"post","title":"En Zhou Launches Site","date":"2017-08-24T22:00:00.000Z","_content":"\nWell. Finally got around to putting this old website together. Neat thing about it - powered by [Jekyll](http://jekyllrb.com) and I can use Markdown to author my posts. It actually is a lot easier than I thought it was going to be.\n","source":"_posts/2017-08-25-ZhouEn-site-launched.md","raw":"---\nlayout: post\ntitle: \"En Zhou Launches Site\"\ndate: 2017-08-25\n---\n\nWell. Finally got around to putting this old website together. Neat thing about it - powered by [Jekyll](http://jekyllrb.com) and I can use Markdown to author my posts. It actually is a lot easier than I thought it was going to be.\n","slug":"2017-08-25-ZhouEn-site-launched","published":1,"updated":"2020-10-12T09:37:34.180Z","comments":1,"photos":[],"link":"","_id":"ckg6cknqg00003z8aatkiklth","content":"<p>Well. Finally got around to putting this old website together. Neat thing about it - powered by <a href=\"http://jekyllrb.com\" target=\"_blank\" rel=\"noopener\">Jekyll</a> and I can use Markdown to author my posts. It actually is a lot easier than I thought it was going to be.</p>\n","site":{"data":{}},"excerpt":"","more":"<p>Well. Finally got around to putting this old website together. Neat thing about it - powered by <a href=\"http://jekyllrb.com\" target=\"_blank\" rel=\"noopener\">Jekyll</a> and I can use Markdown to author my posts. It actually is a lot easier than I thought it was going to be.</p>\n"},{"layout":"post","title":"Enable Sublime Text in Tmux Command Line on MacOS","date":"2018-07-11T22:00:00.000Z","_content":"\n\n## Problem Description\n\nWhen you create a symbolic link to start sublime text editor from command line in tmux, you get an error message:\n\n```text\nUnable to launch sublime text\n```\n\nThis is due to tmux doesn't have root access to the bin directory. The following steps fixed this issue for me on my Mac.\n\n## System Details and Application\n\n* OS:\n\n    ```text\n    macOS Version 10.13.5\n    ```\n\n* Applications:\n\n    ```\n    Sublime Text 3\n    Tmux running from iTerm 2\n    ```\n\n## Create Symbolic Link for Sublime Text 3\n\n```bash\nln -s /Applications/Sublime\\ Text.app/Contents/SharedSupport/bin/subl /usr/local/bin/subl\n```\n\n## Install a wrapper to handle subl -w in tmux\n\n```bash\nbrew install reattach-to-user-namespace\n```\n\n## Add command to `~/.tmux.conf`\n\n```bash\necho \"set-option -g default-command \\\"reattach-to-user-namespace -l bash\\\"\" >> ~/.tmux.conf\n```\n\n## Restart the tmux server\n\n```bash\ntmux kill-server\n```\n","source":"_posts/2018-07-12-Enable-Sublime-Text-in-Tmux-Command-Line-on-MacOS.md","raw":"---\nlayout: post\ntitle: \"Enable Sublime Text in Tmux Command Line on MacOS\"\ndate: 2018-07-12\ntags: [Sublime]\ncategories: [\"Text Editor\", \"IDE\"]\n---\n\n\n## Problem Description\n\nWhen you create a symbolic link to start sublime text editor from command line in tmux, you get an error message:\n\n```text\nUnable to launch sublime text\n```\n\nThis is due to tmux doesn't have root access to the bin directory. The following steps fixed this issue for me on my Mac.\n\n## System Details and Application\n\n* OS:\n\n    ```text\n    macOS Version 10.13.5\n    ```\n\n* Applications:\n\n    ```\n    Sublime Text 3\n    Tmux running from iTerm 2\n    ```\n\n## Create Symbolic Link for Sublime Text 3\n\n```bash\nln -s /Applications/Sublime\\ Text.app/Contents/SharedSupport/bin/subl /usr/local/bin/subl\n```\n\n## Install a wrapper to handle subl -w in tmux\n\n```bash\nbrew install reattach-to-user-namespace\n```\n\n## Add command to `~/.tmux.conf`\n\n```bash\necho \"set-option -g default-command \\\"reattach-to-user-namespace -l bash\\\"\" >> ~/.tmux.conf\n```\n\n## Restart the tmux server\n\n```bash\ntmux kill-server\n```\n","slug":"2018-07-12-Enable-Sublime-Text-in-Tmux-Command-Line-on-MacOS","published":1,"updated":"2020-10-12T09:37:34.181Z","comments":1,"photos":[],"link":"","_id":"ckg6cknqm00023z8ai49yn3tm","content":"<h2 id=\"Problem-Description\"><a href=\"#Problem-Description\" class=\"headerlink\" title=\"Problem Description\"></a>Problem Description</h2><p>When you create a symbolic link to start sublime text editor from command line in tmux, you get an error message:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Unable to launch sublime text</span><br></pre></td></tr></table></figure>\n\n<p>This is due to tmux doesn’t have root access to the bin directory. The following steps fixed this issue for me on my Mac.</p>\n<h2 id=\"System-Details-and-Application\"><a href=\"#System-Details-and-Application\" class=\"headerlink\" title=\"System Details and Application\"></a>System Details and Application</h2><ul>\n<li><p>OS:</p>\n  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">macOS Version 10.13.5</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>Applications:</p>\n  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Sublime Text 3</span><br><span class=\"line\">Tmux running from iTerm 2</span><br></pre></td></tr></table></figure>\n\n</li>\n</ul>\n<h2 id=\"Create-Symbolic-Link-for-Sublime-Text-3\"><a href=\"#Create-Symbolic-Link-for-Sublime-Text-3\" class=\"headerlink\" title=\"Create Symbolic Link for Sublime Text 3\"></a>Create Symbolic Link for Sublime Text 3</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ln -s /Applications/Sublime\\ Text.app/Contents/SharedSupport/bin/subl /usr/<span class=\"built_in\">local</span>/bin/subl</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Install-a-wrapper-to-handle-subl-w-in-tmux\"><a href=\"#Install-a-wrapper-to-handle-subl-w-in-tmux\" class=\"headerlink\" title=\"Install a wrapper to handle subl -w in tmux\"></a>Install a wrapper to handle subl -w in tmux</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">brew install reattach-to-user-namespace</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Add-command-to-tmux-conf\"><a href=\"#Add-command-to-tmux-conf\" class=\"headerlink\" title=\"Add command to ~/.tmux.conf\"></a>Add command to <code>~/.tmux.conf</code></h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">\"set-option -g default-command \\\"reattach-to-user-namespace -l bash\\\"\"</span> &gt;&gt; ~/.tmux.conf</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Restart-the-tmux-server\"><a href=\"#Restart-the-tmux-server\" class=\"headerlink\" title=\"Restart the tmux server\"></a>Restart the tmux server</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tmux <span class=\"built_in\">kill</span>-server</span><br></pre></td></tr></table></figure>\n\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"Problem-Description\"><a href=\"#Problem-Description\" class=\"headerlink\" title=\"Problem Description\"></a>Problem Description</h2><p>When you create a symbolic link to start sublime text editor from command line in tmux, you get an error message:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Unable to launch sublime text</span><br></pre></td></tr></table></figure>\n\n<p>This is due to tmux doesn’t have root access to the bin directory. The following steps fixed this issue for me on my Mac.</p>\n<h2 id=\"System-Details-and-Application\"><a href=\"#System-Details-and-Application\" class=\"headerlink\" title=\"System Details and Application\"></a>System Details and Application</h2><ul>\n<li><p>OS:</p>\n  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">macOS Version 10.13.5</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>Applications:</p>\n  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Sublime Text 3</span><br><span class=\"line\">Tmux running from iTerm 2</span><br></pre></td></tr></table></figure>\n\n</li>\n</ul>\n<h2 id=\"Create-Symbolic-Link-for-Sublime-Text-3\"><a href=\"#Create-Symbolic-Link-for-Sublime-Text-3\" class=\"headerlink\" title=\"Create Symbolic Link for Sublime Text 3\"></a>Create Symbolic Link for Sublime Text 3</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ln -s /Applications/Sublime\\ Text.app/Contents/SharedSupport/bin/subl /usr/<span class=\"built_in\">local</span>/bin/subl</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Install-a-wrapper-to-handle-subl-w-in-tmux\"><a href=\"#Install-a-wrapper-to-handle-subl-w-in-tmux\" class=\"headerlink\" title=\"Install a wrapper to handle subl -w in tmux\"></a>Install a wrapper to handle subl -w in tmux</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">brew install reattach-to-user-namespace</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Add-command-to-tmux-conf\"><a href=\"#Add-command-to-tmux-conf\" class=\"headerlink\" title=\"Add command to ~/.tmux.conf\"></a>Add command to <code>~/.tmux.conf</code></h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">\"set-option -g default-command \\\"reattach-to-user-namespace -l bash\\\"\"</span> &gt;&gt; ~/.tmux.conf</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Restart-the-tmux-server\"><a href=\"#Restart-the-tmux-server\" class=\"headerlink\" title=\"Restart the tmux server\"></a>Restart the tmux server</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tmux <span class=\"built_in\">kill</span>-server</span><br></pre></td></tr></table></figure>\n\n"},{"layout":"post","title":"The 2nd Post","date":"2017-09-13T22:00:00.000Z","_content":"\nLet's how the multiple posts look like.\n","source":"_posts/2017-09-14-Another-post.md","raw":"---\nlayout: post\ntitle: \"The 2nd Post\"\ndate: 2017-09-14\n---\n\nLet's how the multiple posts look like.\n","slug":"2017-09-14-Another-post","published":1,"updated":"2020-10-12T09:37:34.180Z","comments":1,"photos":[],"link":"","_id":"ckg6cknqp00043z8apdmzu1mq","content":"<p>Let’s how the multiple posts look like.</p>\n","site":{"data":{}},"excerpt":"","more":"<p>Let’s how the multiple posts look like.</p>\n"},{"title":"Deploy A Django Service to a Remote VM","description":"This is a summary of an article I've read on how to deploy a Django service to a remote server.","date":"2019-10-02T00:25:54.000Z","_content":"\n## Create an User on remote VM\n1. login to the remote vm\n2. run: `adduser username`\n3. add password and details\n4. add the user to `sudo` group: `adduser username sudo`\n\n\n## Update remote VM hostname\n1. set new hostname: `hostnamectl set-hostname new_hostname`\n2. update the `/etc/hosts` file:\n    * open the file with `vim`: `vim /etc/hosts`\n    * add this line `vm_ip_address  new_hostname` right below `127.0.0.1      localhost`\n\n## Enable `ssh` Key Based Login\n0. create a directory on the remote vm: `mkdir -p ~/.ssh`\n1. generate ssh-key on local machine: `ssh-keygen -b 4096`\n2. copy the public key to the remote vm: `scp ~/.ssh/id_rsa.pub username@remote_vm_ip:~/.ssh/authorized_keys`\n3. login to the vm\n4. give `700` permission to the `.ssh` directory\n5. give `600` permissions to the contents inside `.ssh` directory\n\n## Update `ssh` Permissions\n1. login to the remote vm\n2. open `/etc/ssh/sshd_config` with root access\n3. Set `PermitRootLogin` to `no`\n4. Set `PasswordAuthentication` to `no`\n5. Restart `ssh service`: `sudo systemctl restart sshd`\n\n## Setup Firewall: only allow incoming traffic on port 8000 and ssh\n1. `sudo apt-get install ufw`\n2. `sudo ufw default allow outgoing`\n3. `sudo ufw default deny incoming`\n4. `sudo ufw allow ssh`\n5. `sudo ufw allow 8000`\n6. `sudo ufw enable`, yes\n7. `sudo ufw status`\n\n## Prep Django App for Deployment\n1. activate virtual environment\n2. run `pip freeze > requirements.txt` to create requirements file for the virtual enirment\n3. copy the project folder to the vm server\n4. install `sudo apt-get install python3-pip python3-venv` on the vm\n5. create virtual environment: `python3 -m venv django_project/venv`\n6. activate the virtual environment\n7. install requirement: `pip install -r requirements.txt`\n\n## Update Django Settings in `settings.py`\n1.open `settings.py`\n2.update `ALLOWD_HOSTS` to include your VM's IP\n3.update `STATIC_ROOT = os.path.join(BASE_DIR, 'static')`\n4.run `python manage.py collectstatic` to create and copy static files to `static` directory\n5.`python manage.py runserver 0.0.0.0:8000`\n\n## Add Django Service to `Apache`\n1. Install apache: `sudo apt install apache2`\n2. Install apache python lib: `sudo apt install libapache2-mod-wsgi-py3`\n3. Configure apache2 services in `/ect/apache2/sites-available`\n4. Make a copy of the config file in the config directory: `sudo cp 000-default.conf django_project.conf`\n5. Update the config file:\n    * Add rules right before `</VirtualHost>`:\n        ```\n        Alias /static /home/username/django_project_dir/static\n        <Directory /home/username/django_project_dir/static>\n            Require all granted\n        </Directory>\n        \n        Alias /media /home/username/django_project_dir/media\n        <Directory /home/username/django_project_dir/media>\n            Require all granted\n        </Directory>\n        \n        <Directory /home/username/django_project_dir/project_dir>\n            <Files wsgi.py>\n                Require all granted\n            </Files>\n        </Directory>\n        \n        WSGIScriptAlias / /home/username/django_project_dir/django_project/wsgi.py\n        WSGIDaemonProcess django_app python-path=/home/username/django_project/venv\n        WSGIProcessGroup django_app\n        ```\n6. Enable the site from apache: `sudo a2ensite django_project`\n7. Disable the default site: `sudo a2dissite 000-default.conf`\n8. Update permission on database and media:\n    * `sudo chown :www-data django_project/db.sqlite3`\n    * `sudo chmod 664 django_project/db.sqlite3`\n    * `sudo chown :www-data django_project`\n9. Update permission on the project folder:\n    ```\n    sudo chown -R :www-data django_project/\n    sudo chmod -R 775 django_project/\n    ```\n10. Create config file in `/etc` called `config.json` or `app_config.json`\n11. Copy the `SECRET_KEY` from the project `settings.py` to the `app_config.json`\n    ```\n    {\n        \"SECRET_KEY\": \"SOME KEYS\",\n        \"EMAIL_USER\": \"your email username\",\n        \"EMAIL_PASS\": \"your email password\"\n    }\n    ```\n12. Update the `settings.py` with following code to load secret key:\n    ```\n    import json\n    with open('/etc/app_config.json') as config_file:\n        config = json.load(config_file)\n        \n    SECRET_KEY = config['SECRET_KEY']\n    DEBUG = False\n    \n    EMAIL_HOST_USER = config.get('EMAIL_USER')\n    EMAIL_HOST_PASS = config.get('EMAIL_PASS')\n    ```\n\n## Update Traffic Rules\n1. `sudo ufw delete allow 8000`\n2. `sudo ufw allow http/tcp`\n3. restart apache server: `sudo service apache2 restart`\n\n\n[Deployment checklist](https://docs.djangoproject.com/en/2.2/howto/deployment/checklist/)\n","source":"_posts/Deploy-A-Django-Service-to-a-Remote-VM.md","raw":"---\ntitle: Deploy A Django Service to a Remote VM\ndescription: This is a summary of an article I've read on how to deploy a Django service to a remote server.\ndate: 2019-10-02 02:25:54\ntags: [Django, Docker, Container]\ncategories: [Deployment]\n---\n\n## Create an User on remote VM\n1. login to the remote vm\n2. run: `adduser username`\n3. add password and details\n4. add the user to `sudo` group: `adduser username sudo`\n\n\n## Update remote VM hostname\n1. set new hostname: `hostnamectl set-hostname new_hostname`\n2. update the `/etc/hosts` file:\n    * open the file with `vim`: `vim /etc/hosts`\n    * add this line `vm_ip_address  new_hostname` right below `127.0.0.1      localhost`\n\n## Enable `ssh` Key Based Login\n0. create a directory on the remote vm: `mkdir -p ~/.ssh`\n1. generate ssh-key on local machine: `ssh-keygen -b 4096`\n2. copy the public key to the remote vm: `scp ~/.ssh/id_rsa.pub username@remote_vm_ip:~/.ssh/authorized_keys`\n3. login to the vm\n4. give `700` permission to the `.ssh` directory\n5. give `600` permissions to the contents inside `.ssh` directory\n\n## Update `ssh` Permissions\n1. login to the remote vm\n2. open `/etc/ssh/sshd_config` with root access\n3. Set `PermitRootLogin` to `no`\n4. Set `PasswordAuthentication` to `no`\n5. Restart `ssh service`: `sudo systemctl restart sshd`\n\n## Setup Firewall: only allow incoming traffic on port 8000 and ssh\n1. `sudo apt-get install ufw`\n2. `sudo ufw default allow outgoing`\n3. `sudo ufw default deny incoming`\n4. `sudo ufw allow ssh`\n5. `sudo ufw allow 8000`\n6. `sudo ufw enable`, yes\n7. `sudo ufw status`\n\n## Prep Django App for Deployment\n1. activate virtual environment\n2. run `pip freeze > requirements.txt` to create requirements file for the virtual enirment\n3. copy the project folder to the vm server\n4. install `sudo apt-get install python3-pip python3-venv` on the vm\n5. create virtual environment: `python3 -m venv django_project/venv`\n6. activate the virtual environment\n7. install requirement: `pip install -r requirements.txt`\n\n## Update Django Settings in `settings.py`\n1.open `settings.py`\n2.update `ALLOWD_HOSTS` to include your VM's IP\n3.update `STATIC_ROOT = os.path.join(BASE_DIR, 'static')`\n4.run `python manage.py collectstatic` to create and copy static files to `static` directory\n5.`python manage.py runserver 0.0.0.0:8000`\n\n## Add Django Service to `Apache`\n1. Install apache: `sudo apt install apache2`\n2. Install apache python lib: `sudo apt install libapache2-mod-wsgi-py3`\n3. Configure apache2 services in `/ect/apache2/sites-available`\n4. Make a copy of the config file in the config directory: `sudo cp 000-default.conf django_project.conf`\n5. Update the config file:\n    * Add rules right before `</VirtualHost>`:\n        ```\n        Alias /static /home/username/django_project_dir/static\n        <Directory /home/username/django_project_dir/static>\n            Require all granted\n        </Directory>\n        \n        Alias /media /home/username/django_project_dir/media\n        <Directory /home/username/django_project_dir/media>\n            Require all granted\n        </Directory>\n        \n        <Directory /home/username/django_project_dir/project_dir>\n            <Files wsgi.py>\n                Require all granted\n            </Files>\n        </Directory>\n        \n        WSGIScriptAlias / /home/username/django_project_dir/django_project/wsgi.py\n        WSGIDaemonProcess django_app python-path=/home/username/django_project/venv\n        WSGIProcessGroup django_app\n        ```\n6. Enable the site from apache: `sudo a2ensite django_project`\n7. Disable the default site: `sudo a2dissite 000-default.conf`\n8. Update permission on database and media:\n    * `sudo chown :www-data django_project/db.sqlite3`\n    * `sudo chmod 664 django_project/db.sqlite3`\n    * `sudo chown :www-data django_project`\n9. Update permission on the project folder:\n    ```\n    sudo chown -R :www-data django_project/\n    sudo chmod -R 775 django_project/\n    ```\n10. Create config file in `/etc` called `config.json` or `app_config.json`\n11. Copy the `SECRET_KEY` from the project `settings.py` to the `app_config.json`\n    ```\n    {\n        \"SECRET_KEY\": \"SOME KEYS\",\n        \"EMAIL_USER\": \"your email username\",\n        \"EMAIL_PASS\": \"your email password\"\n    }\n    ```\n12. Update the `settings.py` with following code to load secret key:\n    ```\n    import json\n    with open('/etc/app_config.json') as config_file:\n        config = json.load(config_file)\n        \n    SECRET_KEY = config['SECRET_KEY']\n    DEBUG = False\n    \n    EMAIL_HOST_USER = config.get('EMAIL_USER')\n    EMAIL_HOST_PASS = config.get('EMAIL_PASS')\n    ```\n\n## Update Traffic Rules\n1. `sudo ufw delete allow 8000`\n2. `sudo ufw allow http/tcp`\n3. restart apache server: `sudo service apache2 restart`\n\n\n[Deployment checklist](https://docs.djangoproject.com/en/2.2/howto/deployment/checklist/)\n","slug":"Deploy-A-Django-Service-to-a-Remote-VM","published":1,"updated":"2020-10-12T09:37:34.181Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckg6cknqy00083z8aoibyhs55","content":"<h2 id=\"Create-an-User-on-remote-VM\"><a href=\"#Create-an-User-on-remote-VM\" class=\"headerlink\" title=\"Create an User on remote VM\"></a>Create an User on remote VM</h2><ol>\n<li>login to the remote vm</li>\n<li>run: <code>adduser username</code></li>\n<li>add password and details</li>\n<li>add the user to <code>sudo</code> group: <code>adduser username sudo</code></li>\n</ol>\n<h2 id=\"Update-remote-VM-hostname\"><a href=\"#Update-remote-VM-hostname\" class=\"headerlink\" title=\"Update remote VM hostname\"></a>Update remote VM hostname</h2><ol>\n<li>set new hostname: <code>hostnamectl set-hostname new_hostname</code></li>\n<li>update the <code>/etc/hosts</code> file:<ul>\n<li>open the file with <code>vim</code>: <code>vim /etc/hosts</code></li>\n<li>add this line <code>vm_ip_address  new_hostname</code> right below <code>127.0.0.1      localhost</code></li>\n</ul>\n</li>\n</ol>\n<h2 id=\"Enable-ssh-Key-Based-Login\"><a href=\"#Enable-ssh-Key-Based-Login\" class=\"headerlink\" title=\"Enable ssh Key Based Login\"></a>Enable <code>ssh</code> Key Based Login</h2><ol start=\"0\">\n<li>create a directory on the remote vm: <code>mkdir -p ~/.ssh</code></li>\n<li>generate ssh-key on local machine: <code>ssh-keygen -b 4096</code></li>\n<li>copy the public key to the remote vm: <code>scp ~/.ssh/id_rsa.pub username@remote_vm_ip:~/.ssh/authorized_keys</code></li>\n<li>login to the vm</li>\n<li>give <code>700</code> permission to the <code>.ssh</code> directory</li>\n<li>give <code>600</code> permissions to the contents inside <code>.ssh</code> directory</li>\n</ol>\n<h2 id=\"Update-ssh-Permissions\"><a href=\"#Update-ssh-Permissions\" class=\"headerlink\" title=\"Update ssh Permissions\"></a>Update <code>ssh</code> Permissions</h2><ol>\n<li>login to the remote vm</li>\n<li>open <code>/etc/ssh/sshd_config</code> with root access</li>\n<li>Set <code>PermitRootLogin</code> to <code>no</code></li>\n<li>Set <code>PasswordAuthentication</code> to <code>no</code></li>\n<li>Restart <code>ssh service</code>: <code>sudo systemctl restart sshd</code></li>\n</ol>\n<h2 id=\"Setup-Firewall-only-allow-incoming-traffic-on-port-8000-and-ssh\"><a href=\"#Setup-Firewall-only-allow-incoming-traffic-on-port-8000-and-ssh\" class=\"headerlink\" title=\"Setup Firewall: only allow incoming traffic on port 8000 and ssh\"></a>Setup Firewall: only allow incoming traffic on port 8000 and ssh</h2><ol>\n<li><code>sudo apt-get install ufw</code></li>\n<li><code>sudo ufw default allow outgoing</code></li>\n<li><code>sudo ufw default deny incoming</code></li>\n<li><code>sudo ufw allow ssh</code></li>\n<li><code>sudo ufw allow 8000</code></li>\n<li><code>sudo ufw enable</code>, yes</li>\n<li><code>sudo ufw status</code></li>\n</ol>\n<h2 id=\"Prep-Django-App-for-Deployment\"><a href=\"#Prep-Django-App-for-Deployment\" class=\"headerlink\" title=\"Prep Django App for Deployment\"></a>Prep Django App for Deployment</h2><ol>\n<li>activate virtual environment</li>\n<li>run <code>pip freeze &gt; requirements.txt</code> to create requirements file for the virtual enirment</li>\n<li>copy the project folder to the vm server</li>\n<li>install <code>sudo apt-get install python3-pip python3-venv</code> on the vm</li>\n<li>create virtual environment: <code>python3 -m venv django_project/venv</code></li>\n<li>activate the virtual environment</li>\n<li>install requirement: <code>pip install -r requirements.txt</code></li>\n</ol>\n<h2 id=\"Update-Django-Settings-in-settings-py\"><a href=\"#Update-Django-Settings-in-settings-py\" class=\"headerlink\" title=\"Update Django Settings in settings.py\"></a>Update Django Settings in <code>settings.py</code></h2><p>1.open <code>settings.py</code><br>2.update <code>ALLOWD_HOSTS</code> to include your VM’s IP<br>3.update <code>STATIC_ROOT = os.path.join(BASE_DIR, &#39;static&#39;)</code><br>4.run <code>python manage.py collectstatic</code> to create and copy static files to <code>static</code> directory<br>5.<code>python manage.py runserver 0.0.0.0:8000</code></p>\n<h2 id=\"Add-Django-Service-to-Apache\"><a href=\"#Add-Django-Service-to-Apache\" class=\"headerlink\" title=\"Add Django Service to Apache\"></a>Add Django Service to <code>Apache</code></h2><ol>\n<li><p>Install apache: <code>sudo apt install apache2</code></p>\n</li>\n<li><p>Install apache python lib: <code>sudo apt install libapache2-mod-wsgi-py3</code></p>\n</li>\n<li><p>Configure apache2 services in <code>/ect/apache2/sites-available</code></p>\n</li>\n<li><p>Make a copy of the config file in the config directory: <code>sudo cp 000-default.conf django_project.conf</code></p>\n</li>\n<li><p>Update the config file:</p>\n<ul>\n<li>Add rules right before <code>&lt;/VirtualHost&gt;</code>:  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Alias /static /home/username/django_project_dir/static</span><br><span class=\"line\">&lt;Directory /home/username/django_project_dir/static&gt;</span><br><span class=\"line\">    Require all granted</span><br><span class=\"line\">&lt;/Directory&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">Alias /media /home/username/django_project_dir/media</span><br><span class=\"line\">&lt;Directory /home/username/django_project_dir/media&gt;</span><br><span class=\"line\">    Require all granted</span><br><span class=\"line\">&lt;/Directory&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;Directory /home/username/django_project_dir/project_dir&gt;</span><br><span class=\"line\">    &lt;Files wsgi.py&gt;</span><br><span class=\"line\">        Require all granted</span><br><span class=\"line\">    &lt;/Files&gt;</span><br><span class=\"line\">&lt;/Directory&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">WSGIScriptAlias / /home/username/django_project_dir/django_project/wsgi.py</span><br><span class=\"line\">WSGIDaemonProcess django_app python-path=/home/username/django_project/venv</span><br><span class=\"line\">WSGIProcessGroup django_app</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n<li><p>Enable the site from apache: <code>sudo a2ensite django_project</code></p>\n</li>\n<li><p>Disable the default site: <code>sudo a2dissite 000-default.conf</code></p>\n</li>\n<li><p>Update permission on database and media:</p>\n<ul>\n<li><code>sudo chown :www-data django_project/db.sqlite3</code></li>\n<li><code>sudo chmod 664 django_project/db.sqlite3</code></li>\n<li><code>sudo chown :www-data django_project</code></li>\n</ul>\n</li>\n<li><p>Update permission on the project folder:</p>\n <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo chown -R :www-data django_project/</span><br><span class=\"line\">sudo chmod -R 775 django_project/</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>Create config file in <code>/etc</code> called <code>config.json</code> or <code>app_config.json</code></p>\n</li>\n<li><p>Copy the <code>SECRET_KEY</code> from the project <code>settings.py</code> to the <code>app_config.json</code></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">    &quot;SECRET_KEY&quot;: &quot;SOME KEYS&quot;,</span><br><span class=\"line\">    &quot;EMAIL_USER&quot;: &quot;your email username&quot;,</span><br><span class=\"line\">    &quot;EMAIL_PASS&quot;: &quot;your email password&quot;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>Update the <code>settings.py</code> with following code to load secret key:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import json</span><br><span class=\"line\">with open(&apos;/etc/app_config.json&apos;) as config_file:</span><br><span class=\"line\">    config = json.load(config_file)</span><br><span class=\"line\">    </span><br><span class=\"line\">SECRET_KEY = config[&apos;SECRET_KEY&apos;]</span><br><span class=\"line\">DEBUG = False</span><br><span class=\"line\"></span><br><span class=\"line\">EMAIL_HOST_USER = config.get(&apos;EMAIL_USER&apos;)</span><br><span class=\"line\">EMAIL_HOST_PASS = config.get(&apos;EMAIL_PASS&apos;)</span><br></pre></td></tr></table></figure>\n\n</li>\n</ol>\n<h2 id=\"Update-Traffic-Rules\"><a href=\"#Update-Traffic-Rules\" class=\"headerlink\" title=\"Update Traffic Rules\"></a>Update Traffic Rules</h2><ol>\n<li><code>sudo ufw delete allow 8000</code></li>\n<li><code>sudo ufw allow http/tcp</code></li>\n<li>restart apache server: <code>sudo service apache2 restart</code></li>\n</ol>\n<p><a href=\"https://docs.djangoproject.com/en/2.2/howto/deployment/checklist/\" target=\"_blank\" rel=\"noopener\">Deployment checklist</a></p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"Create-an-User-on-remote-VM\"><a href=\"#Create-an-User-on-remote-VM\" class=\"headerlink\" title=\"Create an User on remote VM\"></a>Create an User on remote VM</h2><ol>\n<li>login to the remote vm</li>\n<li>run: <code>adduser username</code></li>\n<li>add password and details</li>\n<li>add the user to <code>sudo</code> group: <code>adduser username sudo</code></li>\n</ol>\n<h2 id=\"Update-remote-VM-hostname\"><a href=\"#Update-remote-VM-hostname\" class=\"headerlink\" title=\"Update remote VM hostname\"></a>Update remote VM hostname</h2><ol>\n<li>set new hostname: <code>hostnamectl set-hostname new_hostname</code></li>\n<li>update the <code>/etc/hosts</code> file:<ul>\n<li>open the file with <code>vim</code>: <code>vim /etc/hosts</code></li>\n<li>add this line <code>vm_ip_address  new_hostname</code> right below <code>127.0.0.1      localhost</code></li>\n</ul>\n</li>\n</ol>\n<h2 id=\"Enable-ssh-Key-Based-Login\"><a href=\"#Enable-ssh-Key-Based-Login\" class=\"headerlink\" title=\"Enable ssh Key Based Login\"></a>Enable <code>ssh</code> Key Based Login</h2><ol start=\"0\">\n<li>create a directory on the remote vm: <code>mkdir -p ~/.ssh</code></li>\n<li>generate ssh-key on local machine: <code>ssh-keygen -b 4096</code></li>\n<li>copy the public key to the remote vm: <code>scp ~/.ssh/id_rsa.pub username@remote_vm_ip:~/.ssh/authorized_keys</code></li>\n<li>login to the vm</li>\n<li>give <code>700</code> permission to the <code>.ssh</code> directory</li>\n<li>give <code>600</code> permissions to the contents inside <code>.ssh</code> directory</li>\n</ol>\n<h2 id=\"Update-ssh-Permissions\"><a href=\"#Update-ssh-Permissions\" class=\"headerlink\" title=\"Update ssh Permissions\"></a>Update <code>ssh</code> Permissions</h2><ol>\n<li>login to the remote vm</li>\n<li>open <code>/etc/ssh/sshd_config</code> with root access</li>\n<li>Set <code>PermitRootLogin</code> to <code>no</code></li>\n<li>Set <code>PasswordAuthentication</code> to <code>no</code></li>\n<li>Restart <code>ssh service</code>: <code>sudo systemctl restart sshd</code></li>\n</ol>\n<h2 id=\"Setup-Firewall-only-allow-incoming-traffic-on-port-8000-and-ssh\"><a href=\"#Setup-Firewall-only-allow-incoming-traffic-on-port-8000-and-ssh\" class=\"headerlink\" title=\"Setup Firewall: only allow incoming traffic on port 8000 and ssh\"></a>Setup Firewall: only allow incoming traffic on port 8000 and ssh</h2><ol>\n<li><code>sudo apt-get install ufw</code></li>\n<li><code>sudo ufw default allow outgoing</code></li>\n<li><code>sudo ufw default deny incoming</code></li>\n<li><code>sudo ufw allow ssh</code></li>\n<li><code>sudo ufw allow 8000</code></li>\n<li><code>sudo ufw enable</code>, yes</li>\n<li><code>sudo ufw status</code></li>\n</ol>\n<h2 id=\"Prep-Django-App-for-Deployment\"><a href=\"#Prep-Django-App-for-Deployment\" class=\"headerlink\" title=\"Prep Django App for Deployment\"></a>Prep Django App for Deployment</h2><ol>\n<li>activate virtual environment</li>\n<li>run <code>pip freeze &gt; requirements.txt</code> to create requirements file for the virtual enirment</li>\n<li>copy the project folder to the vm server</li>\n<li>install <code>sudo apt-get install python3-pip python3-venv</code> on the vm</li>\n<li>create virtual environment: <code>python3 -m venv django_project/venv</code></li>\n<li>activate the virtual environment</li>\n<li>install requirement: <code>pip install -r requirements.txt</code></li>\n</ol>\n<h2 id=\"Update-Django-Settings-in-settings-py\"><a href=\"#Update-Django-Settings-in-settings-py\" class=\"headerlink\" title=\"Update Django Settings in settings.py\"></a>Update Django Settings in <code>settings.py</code></h2><p>1.open <code>settings.py</code><br>2.update <code>ALLOWD_HOSTS</code> to include your VM’s IP<br>3.update <code>STATIC_ROOT = os.path.join(BASE_DIR, &#39;static&#39;)</code><br>4.run <code>python manage.py collectstatic</code> to create and copy static files to <code>static</code> directory<br>5.<code>python manage.py runserver 0.0.0.0:8000</code></p>\n<h2 id=\"Add-Django-Service-to-Apache\"><a href=\"#Add-Django-Service-to-Apache\" class=\"headerlink\" title=\"Add Django Service to Apache\"></a>Add Django Service to <code>Apache</code></h2><ol>\n<li><p>Install apache: <code>sudo apt install apache2</code></p>\n</li>\n<li><p>Install apache python lib: <code>sudo apt install libapache2-mod-wsgi-py3</code></p>\n</li>\n<li><p>Configure apache2 services in <code>/ect/apache2/sites-available</code></p>\n</li>\n<li><p>Make a copy of the config file in the config directory: <code>sudo cp 000-default.conf django_project.conf</code></p>\n</li>\n<li><p>Update the config file:</p>\n<ul>\n<li>Add rules right before <code>&lt;/VirtualHost&gt;</code>:  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Alias /static /home/username/django_project_dir/static</span><br><span class=\"line\">&lt;Directory /home/username/django_project_dir/static&gt;</span><br><span class=\"line\">    Require all granted</span><br><span class=\"line\">&lt;/Directory&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">Alias /media /home/username/django_project_dir/media</span><br><span class=\"line\">&lt;Directory /home/username/django_project_dir/media&gt;</span><br><span class=\"line\">    Require all granted</span><br><span class=\"line\">&lt;/Directory&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;Directory /home/username/django_project_dir/project_dir&gt;</span><br><span class=\"line\">    &lt;Files wsgi.py&gt;</span><br><span class=\"line\">        Require all granted</span><br><span class=\"line\">    &lt;/Files&gt;</span><br><span class=\"line\">&lt;/Directory&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">WSGIScriptAlias / /home/username/django_project_dir/django_project/wsgi.py</span><br><span class=\"line\">WSGIDaemonProcess django_app python-path=/home/username/django_project/venv</span><br><span class=\"line\">WSGIProcessGroup django_app</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n<li><p>Enable the site from apache: <code>sudo a2ensite django_project</code></p>\n</li>\n<li><p>Disable the default site: <code>sudo a2dissite 000-default.conf</code></p>\n</li>\n<li><p>Update permission on database and media:</p>\n<ul>\n<li><code>sudo chown :www-data django_project/db.sqlite3</code></li>\n<li><code>sudo chmod 664 django_project/db.sqlite3</code></li>\n<li><code>sudo chown :www-data django_project</code></li>\n</ul>\n</li>\n<li><p>Update permission on the project folder:</p>\n <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo chown -R :www-data django_project/</span><br><span class=\"line\">sudo chmod -R 775 django_project/</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>Create config file in <code>/etc</code> called <code>config.json</code> or <code>app_config.json</code></p>\n</li>\n<li><p>Copy the <code>SECRET_KEY</code> from the project <code>settings.py</code> to the <code>app_config.json</code></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">    &quot;SECRET_KEY&quot;: &quot;SOME KEYS&quot;,</span><br><span class=\"line\">    &quot;EMAIL_USER&quot;: &quot;your email username&quot;,</span><br><span class=\"line\">    &quot;EMAIL_PASS&quot;: &quot;your email password&quot;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>Update the <code>settings.py</code> with following code to load secret key:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import json</span><br><span class=\"line\">with open(&apos;/etc/app_config.json&apos;) as config_file:</span><br><span class=\"line\">    config = json.load(config_file)</span><br><span class=\"line\">    </span><br><span class=\"line\">SECRET_KEY = config[&apos;SECRET_KEY&apos;]</span><br><span class=\"line\">DEBUG = False</span><br><span class=\"line\"></span><br><span class=\"line\">EMAIL_HOST_USER = config.get(&apos;EMAIL_USER&apos;)</span><br><span class=\"line\">EMAIL_HOST_PASS = config.get(&apos;EMAIL_PASS&apos;)</span><br></pre></td></tr></table></figure>\n\n</li>\n</ol>\n<h2 id=\"Update-Traffic-Rules\"><a href=\"#Update-Traffic-Rules\" class=\"headerlink\" title=\"Update Traffic Rules\"></a>Update Traffic Rules</h2><ol>\n<li><code>sudo ufw delete allow 8000</code></li>\n<li><code>sudo ufw allow http/tcp</code></li>\n<li>restart apache server: <code>sudo service apache2 restart</code></li>\n</ol>\n<p><a href=\"https://docs.djangoproject.com/en/2.2/howto/deployment/checklist/\" target=\"_blank\" rel=\"noopener\">Deployment checklist</a></p>\n"},{"layout":"post","title":"Hello World","_content":"Welcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/deployment.html)\n","source":"_posts/hello-world.md","raw":"---\nlayout: post\ntitle: Hello World\ntags: [\"Hexo\"]\ncategories: [\"Quick Start\"]\n---\nWelcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/deployment.html)\n","slug":"hello-world","published":1,"date":"2020-10-12T09:37:34.181Z","updated":"2020-10-12T09:37:34.182Z","comments":1,"photos":[],"link":"","_id":"ckg6cknr000093z8a9ncsc6w7","content":"<p>Welcome to <a href=\"https://hexo.io/\" target=\"_blank\" rel=\"noopener\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\" target=\"_blank\" rel=\"noopener\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\" target=\"_blank\" rel=\"noopener\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\" target=\"_blank\" rel=\"noopener\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new <span class=\"string\">\"My New Post\"</span></span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\" target=\"_blank\" rel=\"noopener\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo server</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/server.html\" target=\"_blank\" rel=\"noopener\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo generate</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\" target=\"_blank\" rel=\"noopener\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo deploy</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/deployment.html\" target=\"_blank\" rel=\"noopener\">Deployment</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p>Welcome to <a href=\"https://hexo.io/\" target=\"_blank\" rel=\"noopener\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\" target=\"_blank\" rel=\"noopener\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\" target=\"_blank\" rel=\"noopener\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\" target=\"_blank\" rel=\"noopener\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new <span class=\"string\">\"My New Post\"</span></span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\" target=\"_blank\" rel=\"noopener\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo server</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/server.html\" target=\"_blank\" rel=\"noopener\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo generate</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\" target=\"_blank\" rel=\"noopener\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo deploy</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/deployment.html\" target=\"_blank\" rel=\"noopener\">Deployment</a></p>\n"},{"layout":"post","title":"Python Datetime Libs","description":"This was a tech spike I did for investigating the 3 datetime libraries we were interested in a project.","date":"2019-10-02T00:39:57.000Z","_content":"\n### Python Date Time Libries: `pytz`, `dateutil`, and `pendulum`\n\nWrite a few paragraphs on converting UTC datetime to localized timezone datetime using the 3 libraries.\n\n```python\nimport datetime\nfrom datetime import timedelta\nimport pytz\nimport dateutil\nimport pendulum\n\n# Test scenarios\n# 1. Create a timezone free UTC version of now\n# 2. Convert that to the following zones:\n# - South Africa\n# - US Eastern\n# - US Pacific\n# - Germany\n# - Japan\n# - India (Weird 30m offset)\n# 3. Do the same for a specific time (2019/08/02 10:33:45+00:00)\n# 3. Create a zoned UTC time on the edge of several DST switch overs\n# 4. Check before and after times\n# 6. Check what happens in the DST switch period (Sunday, November 3, 2:00 am LOCAL)\n#\n# Some details on DST in the US: https://www.timeanddate.com/time/change/usa\n\n\n# fmt = '%Y-%m-%d %H:%M:%S.%f %Z%z'\nfmt = '%Y-%m-%d %H:%M:%S.%f %Z%z'\nutc_zone = 'UTC'\ncat_zone = 'Africa/Johannesburg'\nuse_zone = 'US/Eastern'\nger_zone = 'Europe/Berlin'\ntok_zone = 'Asia/Tokyo'\nkol_zone = 'Asia/Kolkata'\n\n\ndef pytz_spike():\n\n    print('pytz')\n    print('========')\n    # Localize timezone free UTC now\n    now = datetime.datetime.utcnow()\n\n    utc = pytz.utc\n    cat = pytz.timezone(cat_zone)\n    use = pytz.timezone(use_zone)\n    ger = pytz.timezone(ger_zone)\n    tok = pytz.timezone(tok_zone)\n    kol = pytz.timezone(kol_zone)\n\n    utc_now = utc.localize(now)\n    cat_now = cat.localize(now)\n    use_now = use.localize(now)\n    ger_now = ger.localize(now)\n    tok_now = tok.localize(now)\n    kol_now = kol.localize(now)\n\n    print(f'Localize timezone free now() to following timezone:')\n    print(utc_now.strftime(fmt))\n    print(cat_now.strftime(fmt))\n    print(use_now.strftime(fmt))\n    print(ger_now.strftime(fmt))\n    print(tok_now.strftime(fmt))\n    print(kol_now.strftime(fmt))\n\n    # Localize a specific datetime, (2019/08/02 10:33:45+00:00)\n    target_date = datetime.datetime(2019, 7, 21, 10, 33, 45)\n    print(f'\\nLocalize (2019/08/02 10:33:45+00:00) into following timezones:')\n    print(utc.localize(target_date).strftime(fmt))\n    print(cat.localize(target_date).strftime(fmt))\n    print(use.localize(target_date).strftime(fmt))\n    print(ger.localize(target_date).strftime(fmt))\n    print(tok.localize(target_date).strftime(fmt))\n    print(kol.localize(target_date).strftime(fmt))\n\n    # Before DST\n    print(f'\\n{use_zone}: 10 January 2019, 12:34:12')\n    use_before = datetime.datetime(2019, 1, 10, 12, 34, 12, 999999)\n    print(use.localize(use_before).strftime(fmt))\n\n    before_dst = datetime.datetime(2019, 3, 10, 1, 30, 59, 999999)\n    print(f'\\n{use_zone}: 2019-03-10, 02:00:00 clocks were turned forward 1 hour ')\n    print('timezone only changes after 3:00')\n    print(use.localize(before_dst).strftime(fmt))\n    minutes_added = 40\n    print(f'Add {minutes_added} minutes:')\n    print(use.localize(before_dst+timedelta(minutes=minutes_added)).strftime(fmt))\n\n    before_dst = datetime.datetime(2019, 11, 3, 0, 30, 59, 999999)\n    print(f'\\n{use_zone}: 2019-11-3, 02:00:00 clocks are turned backward 1 hour ')\n    print('timezone only changes after 3:00')\n    print(use.localize(before_dst).strftime(fmt))\n    minutes_added = 100\n    print(f'Add {minutes_added} minutes:')\n    print(use.localize(before_dst + timedelta(minutes=minutes_added)).strftime(fmt))\n\n    print('\\n'+use.localize(before_dst).strftime(fmt))\n    minutes_added = 40\n    print(f'Add {minutes_added} minutes:')\n    print(use.localize(before_dst + timedelta(minutes=minutes_added)).strftime(fmt))\n\n    after_dst = datetime.datetime(2019, 11, 3, 2, 30, 59, 999999)\n    print(f'After DST: {use.localize(after_dst).strftime(fmt)}')\n\n\ndef python_dateutil_spike():\n    print('\\ndateutil')\n    print('========')\n    utc = dateutil.tz.gettz(utc_zone)\n    use = dateutil.tz.gettz(use_zone)\n    ger = dateutil.tz.gettz(ger_zone)\n    tok = dateutil.tz.gettz(tok_zone)\n    kol = dateutil.tz.gettz(kol_zone)\n\n    mar_10th = datetime.datetime(2019, 3, 10, 6, 30, 0, 0, tzinfo=utc)\n    print(mar_10th.astimezone(utc).strftime(fmt))\n    print(mar_10th.astimezone(use).strftime(fmt) + f' {use_zone}')\n    minutes_added = 40\n    print(f'Add {minutes_added} minutes')\n    mar_10th_updated = mar_10th + timedelta(minutes=minutes_added)\n    print(mar_10th_updated.astimezone(use).strftime(fmt) + f' {use_zone}')\n\n\ndef pendulum_spike():\n    print('\\npendulum')\n    print('========')\n    # Localize timezone free UTC now\n    utc_now = pendulum.utcnow()\n    year = utc_now.year\n    month = utc_now.month\n    day = utc_now.day\n    hour = utc_now.hour\n    minute = utc_now.minute\n    second = utc_now.second\n    micro_sec = utc_now.microsecond\n\n    \"\"\"\n    Create datetime string, timezone free\n    Localize the time string by adding timezones \n    \"\"\"\n    print('Localize UTC time now')\n    utc = pendulum.datetime(year, month, day, hour, minute, second, micro_sec, tzinfo=utc_zone)\n    print(f'{utc.strftime(fmt)}  -\\t{utc_zone}')\n\n    cat = pendulum.datetime(year, month, day, hour, minute, second, micro_sec, tzinfo=cat_zone)\n    print(f'{cat.strftime(fmt)} -\\t{cat_zone}')\n\n    use = pendulum.datetime(year, month, day, hour, minute, second, micro_sec, tzinfo=use_zone)\n    print(f'{use.strftime(fmt)}  -\\t{use_zone}')\n\n    ger = pendulum.datetime(year, month, day, hour, minute, second, micro_sec, tzinfo=ger_zone)\n    print(f'{ger.strftime(fmt)} -\\t{ger_zone}')\n\n    tok = pendulum.datetime(year, month, day, hour, minute, second, micro_sec, tzinfo=tok_zone)\n    print(f'{tok.strftime(fmt)}  -\\t{tok_zone}')\n\n    kol = pendulum.datetime(year, month, day, hour, minute, second, micro_sec, tzinfo=kol_zone)\n    print(f'{kol.strftime(fmt)}  -\\t{kol_zone}')\n\n###############################################################################\n    before_dst = datetime.datetime(2019, 3, 31, 1, 59, 59, 999999)\n    ger = pendulum.datetime(\n        before_dst.year, before_dst.month, before_dst.day, before_dst.hour,\n        before_dst.minute, before_dst.second, before_dst.microsecond,\n        tzinfo=ger_zone\n    )\n    print(\n        f'\\n{ger_zone}: '\n        f'Sunday, 31 March 2019, 02:00:00 clocks were turned forward 1 hour'\n    )\n    print(ger.strftime(fmt))\n    print('Add 1 microsecond')\n    print(ger.add(microseconds=1).strftime(fmt))\n\n    before_dst = datetime.datetime(2019, 10, 27, 1, 59, 59, 999999)\n    ger = pendulum.datetime(\n        before_dst.year, before_dst.month, before_dst.day, before_dst.hour,\n        before_dst.minute, before_dst.second, before_dst.microsecond,\n        tzinfo=ger_zone\n    )\n    print(f'\\n{ger_zone}: Sunday, 27 October 2019, 03:00:00 clocks are turned backward 1 hour')\n    print(ger.strftime(fmt))\n    print(f'Add 85 minutes to pass 3:00')\n    print(ger.add(minutes=85).strftime(fmt))\n###############################################################################\n    before_dst = datetime.datetime(2019, 1, 10, 12, 34, 12, 999999)\n    use = pendulum.datetime(\n        before_dst.year, before_dst.month, before_dst.day, before_dst.hour,\n        before_dst.minute, before_dst.second, before_dst.microsecond,\n        tzinfo=use_zone\n    )\n    print(f'\\n{use_zone}: 10 January 2019, 12:34:12')\n    print(use.strftime(fmt))\n\n    before_dst = datetime.datetime(2019, 3, 10, 1, 30, 59, 999999)\n    use = pendulum.datetime(\n        before_dst.year, before_dst.month, before_dst.day, before_dst.hour,\n        before_dst.minute, before_dst.second, before_dst.microsecond,\n        tzinfo=use_zone\n    )\n    print(f'\\n{use_zone}: Sunday, 10 March 2019, 02:00:00 clocks were turned forward 1 hour')\n    print('Timezone starts changing after 2:00')\n    print(use.strftime(fmt))\n    minutes_added = 40\n    print(f'Add {minutes_added} minutes:')\n    print(use.add(minutes=minutes_added).strftime(fmt))\n\n    after_dst = datetime.datetime(2019, 4, 5, 12, 34, 12, 999999)\n    use = pendulum.datetime(\n        after_dst.year, after_dst.month, after_dst.day, after_dst.hour,\n        after_dst.minute, after_dst.second, after_dst.microsecond,\n        tzinfo=use_zone\n    )\n    print(f'\\n{use_zone}: 5 April 2019, 12:34:12')\n    print(use.strftime(fmt))\n\n    before_dst = datetime.datetime(2019, 11, 3, 0, 40, 00, 0)\n    use = pendulum.datetime(\n        before_dst.year, before_dst.month, before_dst.day, before_dst.hour,\n        before_dst.minute, before_dst.second, before_dst.microsecond,\n        tzinfo=use_zone\n    )\n    print(f'\\n{use_zone}: Sunday, 3 November 2019, 02:00:00 clocks are turned backward 1 hour ')\n    print(use.strftime(fmt))\n    minutes_added = 85\n    print(f'Add: {minutes_added} minutes')\n    print(use.add(minutes=minutes_added).strftime(fmt))\n\n    before_dst = datetime.datetime(2019, 11, 3, 0, 40, 00, 0)\n    use = pendulum.datetime(\n        before_dst.year, before_dst.month, before_dst.day, before_dst.hour,\n        before_dst.minute, before_dst.second, before_dst.microsecond,\n        tzinfo=use_zone\n    )\n    print('\\n' + use.strftime(fmt))\n    minutes_added = 35\n    print(f'Add: {minutes_added} minutes')\n    print(use.add(minutes=minutes_added).strftime(fmt))\n\n    after_dst = datetime.datetime(2019, 11, 3, 3, 44, 12, 999999)\n    use = pendulum.datetime(\n        after_dst.year, after_dst.month, after_dst.day, after_dst.hour,\n        after_dst.minute, after_dst.second, after_dst.microsecond,\n        tzinfo=use_zone\n    )\n    print(f'\\n{use_zone}: {use.strftime(fmt)}')\n###############################################################################\n\n\nif __name__ == \"__main__\":\n    pytz_spike()\n    python_dateutil_spike()\n    pendulum_spike()\n\n```\n","source":"_posts/Python-Datetime-Libs.md","raw":"---\nlayout: post\ntitle: Python Datetime Libs\ndescription: This was a tech spike I did for investigating the 3 datetime libraries we were interested in a project.\ndate: 2019-10-02 02:39:57\ntags: [Python, Datetime]\n---\n\n### Python Date Time Libries: `pytz`, `dateutil`, and `pendulum`\n\nWrite a few paragraphs on converting UTC datetime to localized timezone datetime using the 3 libraries.\n\n```python\nimport datetime\nfrom datetime import timedelta\nimport pytz\nimport dateutil\nimport pendulum\n\n# Test scenarios\n# 1. Create a timezone free UTC version of now\n# 2. Convert that to the following zones:\n# - South Africa\n# - US Eastern\n# - US Pacific\n# - Germany\n# - Japan\n# - India (Weird 30m offset)\n# 3. Do the same for a specific time (2019/08/02 10:33:45+00:00)\n# 3. Create a zoned UTC time on the edge of several DST switch overs\n# 4. Check before and after times\n# 6. Check what happens in the DST switch period (Sunday, November 3, 2:00 am LOCAL)\n#\n# Some details on DST in the US: https://www.timeanddate.com/time/change/usa\n\n\n# fmt = '%Y-%m-%d %H:%M:%S.%f %Z%z'\nfmt = '%Y-%m-%d %H:%M:%S.%f %Z%z'\nutc_zone = 'UTC'\ncat_zone = 'Africa/Johannesburg'\nuse_zone = 'US/Eastern'\nger_zone = 'Europe/Berlin'\ntok_zone = 'Asia/Tokyo'\nkol_zone = 'Asia/Kolkata'\n\n\ndef pytz_spike():\n\n    print('pytz')\n    print('========')\n    # Localize timezone free UTC now\n    now = datetime.datetime.utcnow()\n\n    utc = pytz.utc\n    cat = pytz.timezone(cat_zone)\n    use = pytz.timezone(use_zone)\n    ger = pytz.timezone(ger_zone)\n    tok = pytz.timezone(tok_zone)\n    kol = pytz.timezone(kol_zone)\n\n    utc_now = utc.localize(now)\n    cat_now = cat.localize(now)\n    use_now = use.localize(now)\n    ger_now = ger.localize(now)\n    tok_now = tok.localize(now)\n    kol_now = kol.localize(now)\n\n    print(f'Localize timezone free now() to following timezone:')\n    print(utc_now.strftime(fmt))\n    print(cat_now.strftime(fmt))\n    print(use_now.strftime(fmt))\n    print(ger_now.strftime(fmt))\n    print(tok_now.strftime(fmt))\n    print(kol_now.strftime(fmt))\n\n    # Localize a specific datetime, (2019/08/02 10:33:45+00:00)\n    target_date = datetime.datetime(2019, 7, 21, 10, 33, 45)\n    print(f'\\nLocalize (2019/08/02 10:33:45+00:00) into following timezones:')\n    print(utc.localize(target_date).strftime(fmt))\n    print(cat.localize(target_date).strftime(fmt))\n    print(use.localize(target_date).strftime(fmt))\n    print(ger.localize(target_date).strftime(fmt))\n    print(tok.localize(target_date).strftime(fmt))\n    print(kol.localize(target_date).strftime(fmt))\n\n    # Before DST\n    print(f'\\n{use_zone}: 10 January 2019, 12:34:12')\n    use_before = datetime.datetime(2019, 1, 10, 12, 34, 12, 999999)\n    print(use.localize(use_before).strftime(fmt))\n\n    before_dst = datetime.datetime(2019, 3, 10, 1, 30, 59, 999999)\n    print(f'\\n{use_zone}: 2019-03-10, 02:00:00 clocks were turned forward 1 hour ')\n    print('timezone only changes after 3:00')\n    print(use.localize(before_dst).strftime(fmt))\n    minutes_added = 40\n    print(f'Add {minutes_added} minutes:')\n    print(use.localize(before_dst+timedelta(minutes=minutes_added)).strftime(fmt))\n\n    before_dst = datetime.datetime(2019, 11, 3, 0, 30, 59, 999999)\n    print(f'\\n{use_zone}: 2019-11-3, 02:00:00 clocks are turned backward 1 hour ')\n    print('timezone only changes after 3:00')\n    print(use.localize(before_dst).strftime(fmt))\n    minutes_added = 100\n    print(f'Add {minutes_added} minutes:')\n    print(use.localize(before_dst + timedelta(minutes=minutes_added)).strftime(fmt))\n\n    print('\\n'+use.localize(before_dst).strftime(fmt))\n    minutes_added = 40\n    print(f'Add {minutes_added} minutes:')\n    print(use.localize(before_dst + timedelta(minutes=minutes_added)).strftime(fmt))\n\n    after_dst = datetime.datetime(2019, 11, 3, 2, 30, 59, 999999)\n    print(f'After DST: {use.localize(after_dst).strftime(fmt)}')\n\n\ndef python_dateutil_spike():\n    print('\\ndateutil')\n    print('========')\n    utc = dateutil.tz.gettz(utc_zone)\n    use = dateutil.tz.gettz(use_zone)\n    ger = dateutil.tz.gettz(ger_zone)\n    tok = dateutil.tz.gettz(tok_zone)\n    kol = dateutil.tz.gettz(kol_zone)\n\n    mar_10th = datetime.datetime(2019, 3, 10, 6, 30, 0, 0, tzinfo=utc)\n    print(mar_10th.astimezone(utc).strftime(fmt))\n    print(mar_10th.astimezone(use).strftime(fmt) + f' {use_zone}')\n    minutes_added = 40\n    print(f'Add {minutes_added} minutes')\n    mar_10th_updated = mar_10th + timedelta(minutes=minutes_added)\n    print(mar_10th_updated.astimezone(use).strftime(fmt) + f' {use_zone}')\n\n\ndef pendulum_spike():\n    print('\\npendulum')\n    print('========')\n    # Localize timezone free UTC now\n    utc_now = pendulum.utcnow()\n    year = utc_now.year\n    month = utc_now.month\n    day = utc_now.day\n    hour = utc_now.hour\n    minute = utc_now.minute\n    second = utc_now.second\n    micro_sec = utc_now.microsecond\n\n    \"\"\"\n    Create datetime string, timezone free\n    Localize the time string by adding timezones \n    \"\"\"\n    print('Localize UTC time now')\n    utc = pendulum.datetime(year, month, day, hour, minute, second, micro_sec, tzinfo=utc_zone)\n    print(f'{utc.strftime(fmt)}  -\\t{utc_zone}')\n\n    cat = pendulum.datetime(year, month, day, hour, minute, second, micro_sec, tzinfo=cat_zone)\n    print(f'{cat.strftime(fmt)} -\\t{cat_zone}')\n\n    use = pendulum.datetime(year, month, day, hour, minute, second, micro_sec, tzinfo=use_zone)\n    print(f'{use.strftime(fmt)}  -\\t{use_zone}')\n\n    ger = pendulum.datetime(year, month, day, hour, minute, second, micro_sec, tzinfo=ger_zone)\n    print(f'{ger.strftime(fmt)} -\\t{ger_zone}')\n\n    tok = pendulum.datetime(year, month, day, hour, minute, second, micro_sec, tzinfo=tok_zone)\n    print(f'{tok.strftime(fmt)}  -\\t{tok_zone}')\n\n    kol = pendulum.datetime(year, month, day, hour, minute, second, micro_sec, tzinfo=kol_zone)\n    print(f'{kol.strftime(fmt)}  -\\t{kol_zone}')\n\n###############################################################################\n    before_dst = datetime.datetime(2019, 3, 31, 1, 59, 59, 999999)\n    ger = pendulum.datetime(\n        before_dst.year, before_dst.month, before_dst.day, before_dst.hour,\n        before_dst.minute, before_dst.second, before_dst.microsecond,\n        tzinfo=ger_zone\n    )\n    print(\n        f'\\n{ger_zone}: '\n        f'Sunday, 31 March 2019, 02:00:00 clocks were turned forward 1 hour'\n    )\n    print(ger.strftime(fmt))\n    print('Add 1 microsecond')\n    print(ger.add(microseconds=1).strftime(fmt))\n\n    before_dst = datetime.datetime(2019, 10, 27, 1, 59, 59, 999999)\n    ger = pendulum.datetime(\n        before_dst.year, before_dst.month, before_dst.day, before_dst.hour,\n        before_dst.minute, before_dst.second, before_dst.microsecond,\n        tzinfo=ger_zone\n    )\n    print(f'\\n{ger_zone}: Sunday, 27 October 2019, 03:00:00 clocks are turned backward 1 hour')\n    print(ger.strftime(fmt))\n    print(f'Add 85 minutes to pass 3:00')\n    print(ger.add(minutes=85).strftime(fmt))\n###############################################################################\n    before_dst = datetime.datetime(2019, 1, 10, 12, 34, 12, 999999)\n    use = pendulum.datetime(\n        before_dst.year, before_dst.month, before_dst.day, before_dst.hour,\n        before_dst.minute, before_dst.second, before_dst.microsecond,\n        tzinfo=use_zone\n    )\n    print(f'\\n{use_zone}: 10 January 2019, 12:34:12')\n    print(use.strftime(fmt))\n\n    before_dst = datetime.datetime(2019, 3, 10, 1, 30, 59, 999999)\n    use = pendulum.datetime(\n        before_dst.year, before_dst.month, before_dst.day, before_dst.hour,\n        before_dst.minute, before_dst.second, before_dst.microsecond,\n        tzinfo=use_zone\n    )\n    print(f'\\n{use_zone}: Sunday, 10 March 2019, 02:00:00 clocks were turned forward 1 hour')\n    print('Timezone starts changing after 2:00')\n    print(use.strftime(fmt))\n    minutes_added = 40\n    print(f'Add {minutes_added} minutes:')\n    print(use.add(minutes=minutes_added).strftime(fmt))\n\n    after_dst = datetime.datetime(2019, 4, 5, 12, 34, 12, 999999)\n    use = pendulum.datetime(\n        after_dst.year, after_dst.month, after_dst.day, after_dst.hour,\n        after_dst.minute, after_dst.second, after_dst.microsecond,\n        tzinfo=use_zone\n    )\n    print(f'\\n{use_zone}: 5 April 2019, 12:34:12')\n    print(use.strftime(fmt))\n\n    before_dst = datetime.datetime(2019, 11, 3, 0, 40, 00, 0)\n    use = pendulum.datetime(\n        before_dst.year, before_dst.month, before_dst.day, before_dst.hour,\n        before_dst.minute, before_dst.second, before_dst.microsecond,\n        tzinfo=use_zone\n    )\n    print(f'\\n{use_zone}: Sunday, 3 November 2019, 02:00:00 clocks are turned backward 1 hour ')\n    print(use.strftime(fmt))\n    minutes_added = 85\n    print(f'Add: {minutes_added} minutes')\n    print(use.add(minutes=minutes_added).strftime(fmt))\n\n    before_dst = datetime.datetime(2019, 11, 3, 0, 40, 00, 0)\n    use = pendulum.datetime(\n        before_dst.year, before_dst.month, before_dst.day, before_dst.hour,\n        before_dst.minute, before_dst.second, before_dst.microsecond,\n        tzinfo=use_zone\n    )\n    print('\\n' + use.strftime(fmt))\n    minutes_added = 35\n    print(f'Add: {minutes_added} minutes')\n    print(use.add(minutes=minutes_added).strftime(fmt))\n\n    after_dst = datetime.datetime(2019, 11, 3, 3, 44, 12, 999999)\n    use = pendulum.datetime(\n        after_dst.year, after_dst.month, after_dst.day, after_dst.hour,\n        after_dst.minute, after_dst.second, after_dst.microsecond,\n        tzinfo=use_zone\n    )\n    print(f'\\n{use_zone}: {use.strftime(fmt)}')\n###############################################################################\n\n\nif __name__ == \"__main__\":\n    pytz_spike()\n    python_dateutil_spike()\n    pendulum_spike()\n\n```\n","slug":"Python-Datetime-Libs","published":1,"updated":"2020-10-12T09:37:34.181Z","comments":1,"photos":[],"link":"","_id":"ckg6cknr2000a3z8aef13zsn0","content":"<h3 id=\"Python-Date-Time-Libries-pytz-dateutil-and-pendulum\"><a href=\"#Python-Date-Time-Libries-pytz-dateutil-and-pendulum\" class=\"headerlink\" title=\"Python Date Time Libries: pytz, dateutil, and pendulum\"></a>Python Date Time Libries: <code>pytz</code>, <code>dateutil</code>, and <code>pendulum</code></h3><p>Write a few paragraphs on converting UTC datetime to localized timezone datetime using the 3 libraries.</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br><span class=\"line\">188</span><br><span class=\"line\">189</span><br><span class=\"line\">190</span><br><span class=\"line\">191</span><br><span class=\"line\">192</span><br><span class=\"line\">193</span><br><span class=\"line\">194</span><br><span class=\"line\">195</span><br><span class=\"line\">196</span><br><span class=\"line\">197</span><br><span class=\"line\">198</span><br><span class=\"line\">199</span><br><span class=\"line\">200</span><br><span class=\"line\">201</span><br><span class=\"line\">202</span><br><span class=\"line\">203</span><br><span class=\"line\">204</span><br><span class=\"line\">205</span><br><span class=\"line\">206</span><br><span class=\"line\">207</span><br><span class=\"line\">208</span><br><span class=\"line\">209</span><br><span class=\"line\">210</span><br><span class=\"line\">211</span><br><span class=\"line\">212</span><br><span class=\"line\">213</span><br><span class=\"line\">214</span><br><span class=\"line\">215</span><br><span class=\"line\">216</span><br><span class=\"line\">217</span><br><span class=\"line\">218</span><br><span class=\"line\">219</span><br><span class=\"line\">220</span><br><span class=\"line\">221</span><br><span class=\"line\">222</span><br><span class=\"line\">223</span><br><span class=\"line\">224</span><br><span class=\"line\">225</span><br><span class=\"line\">226</span><br><span class=\"line\">227</span><br><span class=\"line\">228</span><br><span class=\"line\">229</span><br><span class=\"line\">230</span><br><span class=\"line\">231</span><br><span class=\"line\">232</span><br><span class=\"line\">233</span><br><span class=\"line\">234</span><br><span class=\"line\">235</span><br><span class=\"line\">236</span><br><span class=\"line\">237</span><br><span class=\"line\">238</span><br><span class=\"line\">239</span><br><span class=\"line\">240</span><br><span class=\"line\">241</span><br><span class=\"line\">242</span><br><span class=\"line\">243</span><br><span class=\"line\">244</span><br><span class=\"line\">245</span><br><span class=\"line\">246</span><br><span class=\"line\">247</span><br><span class=\"line\">248</span><br><span class=\"line\">249</span><br><span class=\"line\">250</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> datetime</span><br><span class=\"line\"><span class=\"keyword\">from</span> datetime <span class=\"keyword\">import</span> timedelta</span><br><span class=\"line\"><span class=\"keyword\">import</span> pytz</span><br><span class=\"line\"><span class=\"keyword\">import</span> dateutil</span><br><span class=\"line\"><span class=\"keyword\">import</span> pendulum</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Test scenarios</span></span><br><span class=\"line\"><span class=\"comment\"># 1. Create a timezone free UTC version of now</span></span><br><span class=\"line\"><span class=\"comment\"># 2. Convert that to the following zones:</span></span><br><span class=\"line\"><span class=\"comment\"># - South Africa</span></span><br><span class=\"line\"><span class=\"comment\"># - US Eastern</span></span><br><span class=\"line\"><span class=\"comment\"># - US Pacific</span></span><br><span class=\"line\"><span class=\"comment\"># - Germany</span></span><br><span class=\"line\"><span class=\"comment\"># - Japan</span></span><br><span class=\"line\"><span class=\"comment\"># - India (Weird 30m offset)</span></span><br><span class=\"line\"><span class=\"comment\"># 3. Do the same for a specific time (2019/08/02 10:33:45+00:00)</span></span><br><span class=\"line\"><span class=\"comment\"># 3. Create a zoned UTC time on the edge of several DST switch overs</span></span><br><span class=\"line\"><span class=\"comment\"># 4. Check before and after times</span></span><br><span class=\"line\"><span class=\"comment\"># 6. Check what happens in the DST switch period (Sunday, November 3, 2:00 am LOCAL)</span></span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"comment\"># Some details on DST in the US: https://www.timeanddate.com/time/change/usa</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># fmt = '%Y-%m-%d %H:%M:%S.%f %Z%z'</span></span><br><span class=\"line\">fmt = <span class=\"string\">'%Y-%m-%d %H:%M:%S.%f %Z%z'</span></span><br><span class=\"line\">utc_zone = <span class=\"string\">'UTC'</span></span><br><span class=\"line\">cat_zone = <span class=\"string\">'Africa/Johannesburg'</span></span><br><span class=\"line\">use_zone = <span class=\"string\">'US/Eastern'</span></span><br><span class=\"line\">ger_zone = <span class=\"string\">'Europe/Berlin'</span></span><br><span class=\"line\">tok_zone = <span class=\"string\">'Asia/Tokyo'</span></span><br><span class=\"line\">kol_zone = <span class=\"string\">'Asia/Kolkata'</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">pytz_spike</span><span class=\"params\">()</span>:</span></span><br><span class=\"line\"></span><br><span class=\"line\">    print(<span class=\"string\">'pytz'</span>)</span><br><span class=\"line\">    print(<span class=\"string\">'========'</span>)</span><br><span class=\"line\">    <span class=\"comment\"># Localize timezone free UTC now</span></span><br><span class=\"line\">    now = datetime.datetime.utcnow()</span><br><span class=\"line\"></span><br><span class=\"line\">    utc = pytz.utc</span><br><span class=\"line\">    cat = pytz.timezone(cat_zone)</span><br><span class=\"line\">    use = pytz.timezone(use_zone)</span><br><span class=\"line\">    ger = pytz.timezone(ger_zone)</span><br><span class=\"line\">    tok = pytz.timezone(tok_zone)</span><br><span class=\"line\">    kol = pytz.timezone(kol_zone)</span><br><span class=\"line\"></span><br><span class=\"line\">    utc_now = utc.localize(now)</span><br><span class=\"line\">    cat_now = cat.localize(now)</span><br><span class=\"line\">    use_now = use.localize(now)</span><br><span class=\"line\">    ger_now = ger.localize(now)</span><br><span class=\"line\">    tok_now = tok.localize(now)</span><br><span class=\"line\">    kol_now = kol.localize(now)</span><br><span class=\"line\"></span><br><span class=\"line\">    print(<span class=\"string\">f'Localize timezone free now() to following timezone:'</span>)</span><br><span class=\"line\">    print(utc_now.strftime(fmt))</span><br><span class=\"line\">    print(cat_now.strftime(fmt))</span><br><span class=\"line\">    print(use_now.strftime(fmt))</span><br><span class=\"line\">    print(ger_now.strftime(fmt))</span><br><span class=\"line\">    print(tok_now.strftime(fmt))</span><br><span class=\"line\">    print(kol_now.strftime(fmt))</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># Localize a specific datetime, (2019/08/02 10:33:45+00:00)</span></span><br><span class=\"line\">    target_date = datetime.datetime(<span class=\"number\">2019</span>, <span class=\"number\">7</span>, <span class=\"number\">21</span>, <span class=\"number\">10</span>, <span class=\"number\">33</span>, <span class=\"number\">45</span>)</span><br><span class=\"line\">    print(<span class=\"string\">f'\\nLocalize (2019/08/02 10:33:45+00:00) into following timezones:'</span>)</span><br><span class=\"line\">    print(utc.localize(target_date).strftime(fmt))</span><br><span class=\"line\">    print(cat.localize(target_date).strftime(fmt))</span><br><span class=\"line\">    print(use.localize(target_date).strftime(fmt))</span><br><span class=\"line\">    print(ger.localize(target_date).strftime(fmt))</span><br><span class=\"line\">    print(tok.localize(target_date).strftime(fmt))</span><br><span class=\"line\">    print(kol.localize(target_date).strftime(fmt))</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># Before DST</span></span><br><span class=\"line\">    print(<span class=\"string\">f'\\n<span class=\"subst\">&#123;use_zone&#125;</span>: 10 January 2019, 12:34:12'</span>)</span><br><span class=\"line\">    use_before = datetime.datetime(<span class=\"number\">2019</span>, <span class=\"number\">1</span>, <span class=\"number\">10</span>, <span class=\"number\">12</span>, <span class=\"number\">34</span>, <span class=\"number\">12</span>, <span class=\"number\">999999</span>)</span><br><span class=\"line\">    print(use.localize(use_before).strftime(fmt))</span><br><span class=\"line\"></span><br><span class=\"line\">    before_dst = datetime.datetime(<span class=\"number\">2019</span>, <span class=\"number\">3</span>, <span class=\"number\">10</span>, <span class=\"number\">1</span>, <span class=\"number\">30</span>, <span class=\"number\">59</span>, <span class=\"number\">999999</span>)</span><br><span class=\"line\">    print(<span class=\"string\">f'\\n<span class=\"subst\">&#123;use_zone&#125;</span>: 2019-03-10, 02:00:00 clocks were turned forward 1 hour '</span>)</span><br><span class=\"line\">    print(<span class=\"string\">'timezone only changes after 3:00'</span>)</span><br><span class=\"line\">    print(use.localize(before_dst).strftime(fmt))</span><br><span class=\"line\">    minutes_added = <span class=\"number\">40</span></span><br><span class=\"line\">    print(<span class=\"string\">f'Add <span class=\"subst\">&#123;minutes_added&#125;</span> minutes:'</span>)</span><br><span class=\"line\">    print(use.localize(before_dst+timedelta(minutes=minutes_added)).strftime(fmt))</span><br><span class=\"line\"></span><br><span class=\"line\">    before_dst = datetime.datetime(<span class=\"number\">2019</span>, <span class=\"number\">11</span>, <span class=\"number\">3</span>, <span class=\"number\">0</span>, <span class=\"number\">30</span>, <span class=\"number\">59</span>, <span class=\"number\">999999</span>)</span><br><span class=\"line\">    print(<span class=\"string\">f'\\n<span class=\"subst\">&#123;use_zone&#125;</span>: 2019-11-3, 02:00:00 clocks are turned backward 1 hour '</span>)</span><br><span class=\"line\">    print(<span class=\"string\">'timezone only changes after 3:00'</span>)</span><br><span class=\"line\">    print(use.localize(before_dst).strftime(fmt))</span><br><span class=\"line\">    minutes_added = <span class=\"number\">100</span></span><br><span class=\"line\">    print(<span class=\"string\">f'Add <span class=\"subst\">&#123;minutes_added&#125;</span> minutes:'</span>)</span><br><span class=\"line\">    print(use.localize(before_dst + timedelta(minutes=minutes_added)).strftime(fmt))</span><br><span class=\"line\"></span><br><span class=\"line\">    print(<span class=\"string\">'\\n'</span>+use.localize(before_dst).strftime(fmt))</span><br><span class=\"line\">    minutes_added = <span class=\"number\">40</span></span><br><span class=\"line\">    print(<span class=\"string\">f'Add <span class=\"subst\">&#123;minutes_added&#125;</span> minutes:'</span>)</span><br><span class=\"line\">    print(use.localize(before_dst + timedelta(minutes=minutes_added)).strftime(fmt))</span><br><span class=\"line\"></span><br><span class=\"line\">    after_dst = datetime.datetime(<span class=\"number\">2019</span>, <span class=\"number\">11</span>, <span class=\"number\">3</span>, <span class=\"number\">2</span>, <span class=\"number\">30</span>, <span class=\"number\">59</span>, <span class=\"number\">999999</span>)</span><br><span class=\"line\">    print(<span class=\"string\">f'After DST: <span class=\"subst\">&#123;use.localize(after_dst).strftime(fmt)&#125;</span>'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">python_dateutil_spike</span><span class=\"params\">()</span>:</span></span><br><span class=\"line\">    print(<span class=\"string\">'\\ndateutil'</span>)</span><br><span class=\"line\">    print(<span class=\"string\">'========'</span>)</span><br><span class=\"line\">    utc = dateutil.tz.gettz(utc_zone)</span><br><span class=\"line\">    use = dateutil.tz.gettz(use_zone)</span><br><span class=\"line\">    ger = dateutil.tz.gettz(ger_zone)</span><br><span class=\"line\">    tok = dateutil.tz.gettz(tok_zone)</span><br><span class=\"line\">    kol = dateutil.tz.gettz(kol_zone)</span><br><span class=\"line\"></span><br><span class=\"line\">    mar_10th = datetime.datetime(<span class=\"number\">2019</span>, <span class=\"number\">3</span>, <span class=\"number\">10</span>, <span class=\"number\">6</span>, <span class=\"number\">30</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, tzinfo=utc)</span><br><span class=\"line\">    print(mar_10th.astimezone(utc).strftime(fmt))</span><br><span class=\"line\">    print(mar_10th.astimezone(use).strftime(fmt) + <span class=\"string\">f' <span class=\"subst\">&#123;use_zone&#125;</span>'</span>)</span><br><span class=\"line\">    minutes_added = <span class=\"number\">40</span></span><br><span class=\"line\">    print(<span class=\"string\">f'Add <span class=\"subst\">&#123;minutes_added&#125;</span> minutes'</span>)</span><br><span class=\"line\">    mar_10th_updated = mar_10th + timedelta(minutes=minutes_added)</span><br><span class=\"line\">    print(mar_10th_updated.astimezone(use).strftime(fmt) + <span class=\"string\">f' <span class=\"subst\">&#123;use_zone&#125;</span>'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">pendulum_spike</span><span class=\"params\">()</span>:</span></span><br><span class=\"line\">    print(<span class=\"string\">'\\npendulum'</span>)</span><br><span class=\"line\">    print(<span class=\"string\">'========'</span>)</span><br><span class=\"line\">    <span class=\"comment\"># Localize timezone free UTC now</span></span><br><span class=\"line\">    utc_now = pendulum.utcnow()</span><br><span class=\"line\">    year = utc_now.year</span><br><span class=\"line\">    month = utc_now.month</span><br><span class=\"line\">    day = utc_now.day</span><br><span class=\"line\">    hour = utc_now.hour</span><br><span class=\"line\">    minute = utc_now.minute</span><br><span class=\"line\">    second = utc_now.second</span><br><span class=\"line\">    micro_sec = utc_now.microsecond</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"string\">\"\"\"</span></span><br><span class=\"line\"><span class=\"string\">    Create datetime string, timezone free</span></span><br><span class=\"line\"><span class=\"string\">    Localize the time string by adding timezones </span></span><br><span class=\"line\"><span class=\"string\">    \"\"\"</span></span><br><span class=\"line\">    print(<span class=\"string\">'Localize UTC time now'</span>)</span><br><span class=\"line\">    utc = pendulum.datetime(year, month, day, hour, minute, second, micro_sec, tzinfo=utc_zone)</span><br><span class=\"line\">    print(<span class=\"string\">f'<span class=\"subst\">&#123;utc.strftime(fmt)&#125;</span>  -\\t<span class=\"subst\">&#123;utc_zone&#125;</span>'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    cat = pendulum.datetime(year, month, day, hour, minute, second, micro_sec, tzinfo=cat_zone)</span><br><span class=\"line\">    print(<span class=\"string\">f'<span class=\"subst\">&#123;cat.strftime(fmt)&#125;</span> -\\t<span class=\"subst\">&#123;cat_zone&#125;</span>'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    use = pendulum.datetime(year, month, day, hour, minute, second, micro_sec, tzinfo=use_zone)</span><br><span class=\"line\">    print(<span class=\"string\">f'<span class=\"subst\">&#123;use.strftime(fmt)&#125;</span>  -\\t<span class=\"subst\">&#123;use_zone&#125;</span>'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    ger = pendulum.datetime(year, month, day, hour, minute, second, micro_sec, tzinfo=ger_zone)</span><br><span class=\"line\">    print(<span class=\"string\">f'<span class=\"subst\">&#123;ger.strftime(fmt)&#125;</span> -\\t<span class=\"subst\">&#123;ger_zone&#125;</span>'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    tok = pendulum.datetime(year, month, day, hour, minute, second, micro_sec, tzinfo=tok_zone)</span><br><span class=\"line\">    print(<span class=\"string\">f'<span class=\"subst\">&#123;tok.strftime(fmt)&#125;</span>  -\\t<span class=\"subst\">&#123;tok_zone&#125;</span>'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    kol = pendulum.datetime(year, month, day, hour, minute, second, micro_sec, tzinfo=kol_zone)</span><br><span class=\"line\">    print(<span class=\"string\">f'<span class=\"subst\">&#123;kol.strftime(fmt)&#125;</span>  -\\t<span class=\"subst\">&#123;kol_zone&#125;</span>'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">###############################################################################</span></span><br><span class=\"line\">    before_dst = datetime.datetime(<span class=\"number\">2019</span>, <span class=\"number\">3</span>, <span class=\"number\">31</span>, <span class=\"number\">1</span>, <span class=\"number\">59</span>, <span class=\"number\">59</span>, <span class=\"number\">999999</span>)</span><br><span class=\"line\">    ger = pendulum.datetime(</span><br><span class=\"line\">        before_dst.year, before_dst.month, before_dst.day, before_dst.hour,</span><br><span class=\"line\">        before_dst.minute, before_dst.second, before_dst.microsecond,</span><br><span class=\"line\">        tzinfo=ger_zone</span><br><span class=\"line\">    )</span><br><span class=\"line\">    print(</span><br><span class=\"line\">        <span class=\"string\">f'\\n<span class=\"subst\">&#123;ger_zone&#125;</span>: '</span></span><br><span class=\"line\">        <span class=\"string\">f'Sunday, 31 March 2019, 02:00:00 clocks were turned forward 1 hour'</span></span><br><span class=\"line\">    )</span><br><span class=\"line\">    print(ger.strftime(fmt))</span><br><span class=\"line\">    print(<span class=\"string\">'Add 1 microsecond'</span>)</span><br><span class=\"line\">    print(ger.add(microseconds=<span class=\"number\">1</span>).strftime(fmt))</span><br><span class=\"line\"></span><br><span class=\"line\">    before_dst = datetime.datetime(<span class=\"number\">2019</span>, <span class=\"number\">10</span>, <span class=\"number\">27</span>, <span class=\"number\">1</span>, <span class=\"number\">59</span>, <span class=\"number\">59</span>, <span class=\"number\">999999</span>)</span><br><span class=\"line\">    ger = pendulum.datetime(</span><br><span class=\"line\">        before_dst.year, before_dst.month, before_dst.day, before_dst.hour,</span><br><span class=\"line\">        before_dst.minute, before_dst.second, before_dst.microsecond,</span><br><span class=\"line\">        tzinfo=ger_zone</span><br><span class=\"line\">    )</span><br><span class=\"line\">    print(<span class=\"string\">f'\\n<span class=\"subst\">&#123;ger_zone&#125;</span>: Sunday, 27 October 2019, 03:00:00 clocks are turned backward 1 hour'</span>)</span><br><span class=\"line\">    print(ger.strftime(fmt))</span><br><span class=\"line\">    print(<span class=\"string\">f'Add 85 minutes to pass 3:00'</span>)</span><br><span class=\"line\">    print(ger.add(minutes=<span class=\"number\">85</span>).strftime(fmt))</span><br><span class=\"line\"><span class=\"comment\">###############################################################################</span></span><br><span class=\"line\">    before_dst = datetime.datetime(<span class=\"number\">2019</span>, <span class=\"number\">1</span>, <span class=\"number\">10</span>, <span class=\"number\">12</span>, <span class=\"number\">34</span>, <span class=\"number\">12</span>, <span class=\"number\">999999</span>)</span><br><span class=\"line\">    use = pendulum.datetime(</span><br><span class=\"line\">        before_dst.year, before_dst.month, before_dst.day, before_dst.hour,</span><br><span class=\"line\">        before_dst.minute, before_dst.second, before_dst.microsecond,</span><br><span class=\"line\">        tzinfo=use_zone</span><br><span class=\"line\">    )</span><br><span class=\"line\">    print(<span class=\"string\">f'\\n<span class=\"subst\">&#123;use_zone&#125;</span>: 10 January 2019, 12:34:12'</span>)</span><br><span class=\"line\">    print(use.strftime(fmt))</span><br><span class=\"line\"></span><br><span class=\"line\">    before_dst = datetime.datetime(<span class=\"number\">2019</span>, <span class=\"number\">3</span>, <span class=\"number\">10</span>, <span class=\"number\">1</span>, <span class=\"number\">30</span>, <span class=\"number\">59</span>, <span class=\"number\">999999</span>)</span><br><span class=\"line\">    use = pendulum.datetime(</span><br><span class=\"line\">        before_dst.year, before_dst.month, before_dst.day, before_dst.hour,</span><br><span class=\"line\">        before_dst.minute, before_dst.second, before_dst.microsecond,</span><br><span class=\"line\">        tzinfo=use_zone</span><br><span class=\"line\">    )</span><br><span class=\"line\">    print(<span class=\"string\">f'\\n<span class=\"subst\">&#123;use_zone&#125;</span>: Sunday, 10 March 2019, 02:00:00 clocks were turned forward 1 hour'</span>)</span><br><span class=\"line\">    print(<span class=\"string\">'Timezone starts changing after 2:00'</span>)</span><br><span class=\"line\">    print(use.strftime(fmt))</span><br><span class=\"line\">    minutes_added = <span class=\"number\">40</span></span><br><span class=\"line\">    print(<span class=\"string\">f'Add <span class=\"subst\">&#123;minutes_added&#125;</span> minutes:'</span>)</span><br><span class=\"line\">    print(use.add(minutes=minutes_added).strftime(fmt))</span><br><span class=\"line\"></span><br><span class=\"line\">    after_dst = datetime.datetime(<span class=\"number\">2019</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">12</span>, <span class=\"number\">34</span>, <span class=\"number\">12</span>, <span class=\"number\">999999</span>)</span><br><span class=\"line\">    use = pendulum.datetime(</span><br><span class=\"line\">        after_dst.year, after_dst.month, after_dst.day, after_dst.hour,</span><br><span class=\"line\">        after_dst.minute, after_dst.second, after_dst.microsecond,</span><br><span class=\"line\">        tzinfo=use_zone</span><br><span class=\"line\">    )</span><br><span class=\"line\">    print(<span class=\"string\">f'\\n<span class=\"subst\">&#123;use_zone&#125;</span>: 5 April 2019, 12:34:12'</span>)</span><br><span class=\"line\">    print(use.strftime(fmt))</span><br><span class=\"line\"></span><br><span class=\"line\">    before_dst = datetime.datetime(<span class=\"number\">2019</span>, <span class=\"number\">11</span>, <span class=\"number\">3</span>, <span class=\"number\">0</span>, <span class=\"number\">40</span>, <span class=\"number\">00</span>, <span class=\"number\">0</span>)</span><br><span class=\"line\">    use = pendulum.datetime(</span><br><span class=\"line\">        before_dst.year, before_dst.month, before_dst.day, before_dst.hour,</span><br><span class=\"line\">        before_dst.minute, before_dst.second, before_dst.microsecond,</span><br><span class=\"line\">        tzinfo=use_zone</span><br><span class=\"line\">    )</span><br><span class=\"line\">    print(<span class=\"string\">f'\\n<span class=\"subst\">&#123;use_zone&#125;</span>: Sunday, 3 November 2019, 02:00:00 clocks are turned backward 1 hour '</span>)</span><br><span class=\"line\">    print(use.strftime(fmt))</span><br><span class=\"line\">    minutes_added = <span class=\"number\">85</span></span><br><span class=\"line\">    print(<span class=\"string\">f'Add: <span class=\"subst\">&#123;minutes_added&#125;</span> minutes'</span>)</span><br><span class=\"line\">    print(use.add(minutes=minutes_added).strftime(fmt))</span><br><span class=\"line\"></span><br><span class=\"line\">    before_dst = datetime.datetime(<span class=\"number\">2019</span>, <span class=\"number\">11</span>, <span class=\"number\">3</span>, <span class=\"number\">0</span>, <span class=\"number\">40</span>, <span class=\"number\">00</span>, <span class=\"number\">0</span>)</span><br><span class=\"line\">    use = pendulum.datetime(</span><br><span class=\"line\">        before_dst.year, before_dst.month, before_dst.day, before_dst.hour,</span><br><span class=\"line\">        before_dst.minute, before_dst.second, before_dst.microsecond,</span><br><span class=\"line\">        tzinfo=use_zone</span><br><span class=\"line\">    )</span><br><span class=\"line\">    print(<span class=\"string\">'\\n'</span> + use.strftime(fmt))</span><br><span class=\"line\">    minutes_added = <span class=\"number\">35</span></span><br><span class=\"line\">    print(<span class=\"string\">f'Add: <span class=\"subst\">&#123;minutes_added&#125;</span> minutes'</span>)</span><br><span class=\"line\">    print(use.add(minutes=minutes_added).strftime(fmt))</span><br><span class=\"line\"></span><br><span class=\"line\">    after_dst = datetime.datetime(<span class=\"number\">2019</span>, <span class=\"number\">11</span>, <span class=\"number\">3</span>, <span class=\"number\">3</span>, <span class=\"number\">44</span>, <span class=\"number\">12</span>, <span class=\"number\">999999</span>)</span><br><span class=\"line\">    use = pendulum.datetime(</span><br><span class=\"line\">        after_dst.year, after_dst.month, after_dst.day, after_dst.hour,</span><br><span class=\"line\">        after_dst.minute, after_dst.second, after_dst.microsecond,</span><br><span class=\"line\">        tzinfo=use_zone</span><br><span class=\"line\">    )</span><br><span class=\"line\">    print(<span class=\"string\">f'\\n<span class=\"subst\">&#123;use_zone&#125;</span>: <span class=\"subst\">&#123;use.strftime(fmt)&#125;</span>'</span>)</span><br><span class=\"line\"><span class=\"comment\">###############################################################################</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">\"__main__\"</span>:</span><br><span class=\"line\">    pytz_spike()</span><br><span class=\"line\">    python_dateutil_spike()</span><br><span class=\"line\">    pendulum_spike()</span><br></pre></td></tr></table></figure>\n\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"Python-Date-Time-Libries-pytz-dateutil-and-pendulum\"><a href=\"#Python-Date-Time-Libries-pytz-dateutil-and-pendulum\" class=\"headerlink\" title=\"Python Date Time Libries: pytz, dateutil, and pendulum\"></a>Python Date Time Libries: <code>pytz</code>, <code>dateutil</code>, and <code>pendulum</code></h3><p>Write a few paragraphs on converting UTC datetime to localized timezone datetime using the 3 libraries.</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br><span class=\"line\">188</span><br><span class=\"line\">189</span><br><span class=\"line\">190</span><br><span class=\"line\">191</span><br><span class=\"line\">192</span><br><span class=\"line\">193</span><br><span class=\"line\">194</span><br><span class=\"line\">195</span><br><span class=\"line\">196</span><br><span class=\"line\">197</span><br><span class=\"line\">198</span><br><span class=\"line\">199</span><br><span class=\"line\">200</span><br><span class=\"line\">201</span><br><span class=\"line\">202</span><br><span class=\"line\">203</span><br><span class=\"line\">204</span><br><span class=\"line\">205</span><br><span class=\"line\">206</span><br><span class=\"line\">207</span><br><span class=\"line\">208</span><br><span class=\"line\">209</span><br><span class=\"line\">210</span><br><span class=\"line\">211</span><br><span class=\"line\">212</span><br><span class=\"line\">213</span><br><span class=\"line\">214</span><br><span class=\"line\">215</span><br><span class=\"line\">216</span><br><span class=\"line\">217</span><br><span class=\"line\">218</span><br><span class=\"line\">219</span><br><span class=\"line\">220</span><br><span class=\"line\">221</span><br><span class=\"line\">222</span><br><span class=\"line\">223</span><br><span class=\"line\">224</span><br><span class=\"line\">225</span><br><span class=\"line\">226</span><br><span class=\"line\">227</span><br><span class=\"line\">228</span><br><span class=\"line\">229</span><br><span class=\"line\">230</span><br><span class=\"line\">231</span><br><span class=\"line\">232</span><br><span class=\"line\">233</span><br><span class=\"line\">234</span><br><span class=\"line\">235</span><br><span class=\"line\">236</span><br><span class=\"line\">237</span><br><span class=\"line\">238</span><br><span class=\"line\">239</span><br><span class=\"line\">240</span><br><span class=\"line\">241</span><br><span class=\"line\">242</span><br><span class=\"line\">243</span><br><span class=\"line\">244</span><br><span class=\"line\">245</span><br><span class=\"line\">246</span><br><span class=\"line\">247</span><br><span class=\"line\">248</span><br><span class=\"line\">249</span><br><span class=\"line\">250</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> datetime</span><br><span class=\"line\"><span class=\"keyword\">from</span> datetime <span class=\"keyword\">import</span> timedelta</span><br><span class=\"line\"><span class=\"keyword\">import</span> pytz</span><br><span class=\"line\"><span class=\"keyword\">import</span> dateutil</span><br><span class=\"line\"><span class=\"keyword\">import</span> pendulum</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Test scenarios</span></span><br><span class=\"line\"><span class=\"comment\"># 1. Create a timezone free UTC version of now</span></span><br><span class=\"line\"><span class=\"comment\"># 2. Convert that to the following zones:</span></span><br><span class=\"line\"><span class=\"comment\"># - South Africa</span></span><br><span class=\"line\"><span class=\"comment\"># - US Eastern</span></span><br><span class=\"line\"><span class=\"comment\"># - US Pacific</span></span><br><span class=\"line\"><span class=\"comment\"># - Germany</span></span><br><span class=\"line\"><span class=\"comment\"># - Japan</span></span><br><span class=\"line\"><span class=\"comment\"># - India (Weird 30m offset)</span></span><br><span class=\"line\"><span class=\"comment\"># 3. Do the same for a specific time (2019/08/02 10:33:45+00:00)</span></span><br><span class=\"line\"><span class=\"comment\"># 3. Create a zoned UTC time on the edge of several DST switch overs</span></span><br><span class=\"line\"><span class=\"comment\"># 4. Check before and after times</span></span><br><span class=\"line\"><span class=\"comment\"># 6. Check what happens in the DST switch period (Sunday, November 3, 2:00 am LOCAL)</span></span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"comment\"># Some details on DST in the US: https://www.timeanddate.com/time/change/usa</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># fmt = '%Y-%m-%d %H:%M:%S.%f %Z%z'</span></span><br><span class=\"line\">fmt = <span class=\"string\">'%Y-%m-%d %H:%M:%S.%f %Z%z'</span></span><br><span class=\"line\">utc_zone = <span class=\"string\">'UTC'</span></span><br><span class=\"line\">cat_zone = <span class=\"string\">'Africa/Johannesburg'</span></span><br><span class=\"line\">use_zone = <span class=\"string\">'US/Eastern'</span></span><br><span class=\"line\">ger_zone = <span class=\"string\">'Europe/Berlin'</span></span><br><span class=\"line\">tok_zone = <span class=\"string\">'Asia/Tokyo'</span></span><br><span class=\"line\">kol_zone = <span class=\"string\">'Asia/Kolkata'</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">pytz_spike</span><span class=\"params\">()</span>:</span></span><br><span class=\"line\"></span><br><span class=\"line\">    print(<span class=\"string\">'pytz'</span>)</span><br><span class=\"line\">    print(<span class=\"string\">'========'</span>)</span><br><span class=\"line\">    <span class=\"comment\"># Localize timezone free UTC now</span></span><br><span class=\"line\">    now = datetime.datetime.utcnow()</span><br><span class=\"line\"></span><br><span class=\"line\">    utc = pytz.utc</span><br><span class=\"line\">    cat = pytz.timezone(cat_zone)</span><br><span class=\"line\">    use = pytz.timezone(use_zone)</span><br><span class=\"line\">    ger = pytz.timezone(ger_zone)</span><br><span class=\"line\">    tok = pytz.timezone(tok_zone)</span><br><span class=\"line\">    kol = pytz.timezone(kol_zone)</span><br><span class=\"line\"></span><br><span class=\"line\">    utc_now = utc.localize(now)</span><br><span class=\"line\">    cat_now = cat.localize(now)</span><br><span class=\"line\">    use_now = use.localize(now)</span><br><span class=\"line\">    ger_now = ger.localize(now)</span><br><span class=\"line\">    tok_now = tok.localize(now)</span><br><span class=\"line\">    kol_now = kol.localize(now)</span><br><span class=\"line\"></span><br><span class=\"line\">    print(<span class=\"string\">f'Localize timezone free now() to following timezone:'</span>)</span><br><span class=\"line\">    print(utc_now.strftime(fmt))</span><br><span class=\"line\">    print(cat_now.strftime(fmt))</span><br><span class=\"line\">    print(use_now.strftime(fmt))</span><br><span class=\"line\">    print(ger_now.strftime(fmt))</span><br><span class=\"line\">    print(tok_now.strftime(fmt))</span><br><span class=\"line\">    print(kol_now.strftime(fmt))</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># Localize a specific datetime, (2019/08/02 10:33:45+00:00)</span></span><br><span class=\"line\">    target_date = datetime.datetime(<span class=\"number\">2019</span>, <span class=\"number\">7</span>, <span class=\"number\">21</span>, <span class=\"number\">10</span>, <span class=\"number\">33</span>, <span class=\"number\">45</span>)</span><br><span class=\"line\">    print(<span class=\"string\">f'\\nLocalize (2019/08/02 10:33:45+00:00) into following timezones:'</span>)</span><br><span class=\"line\">    print(utc.localize(target_date).strftime(fmt))</span><br><span class=\"line\">    print(cat.localize(target_date).strftime(fmt))</span><br><span class=\"line\">    print(use.localize(target_date).strftime(fmt))</span><br><span class=\"line\">    print(ger.localize(target_date).strftime(fmt))</span><br><span class=\"line\">    print(tok.localize(target_date).strftime(fmt))</span><br><span class=\"line\">    print(kol.localize(target_date).strftime(fmt))</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># Before DST</span></span><br><span class=\"line\">    print(<span class=\"string\">f'\\n<span class=\"subst\">&#123;use_zone&#125;</span>: 10 January 2019, 12:34:12'</span>)</span><br><span class=\"line\">    use_before = datetime.datetime(<span class=\"number\">2019</span>, <span class=\"number\">1</span>, <span class=\"number\">10</span>, <span class=\"number\">12</span>, <span class=\"number\">34</span>, <span class=\"number\">12</span>, <span class=\"number\">999999</span>)</span><br><span class=\"line\">    print(use.localize(use_before).strftime(fmt))</span><br><span class=\"line\"></span><br><span class=\"line\">    before_dst = datetime.datetime(<span class=\"number\">2019</span>, <span class=\"number\">3</span>, <span class=\"number\">10</span>, <span class=\"number\">1</span>, <span class=\"number\">30</span>, <span class=\"number\">59</span>, <span class=\"number\">999999</span>)</span><br><span class=\"line\">    print(<span class=\"string\">f'\\n<span class=\"subst\">&#123;use_zone&#125;</span>: 2019-03-10, 02:00:00 clocks were turned forward 1 hour '</span>)</span><br><span class=\"line\">    print(<span class=\"string\">'timezone only changes after 3:00'</span>)</span><br><span class=\"line\">    print(use.localize(before_dst).strftime(fmt))</span><br><span class=\"line\">    minutes_added = <span class=\"number\">40</span></span><br><span class=\"line\">    print(<span class=\"string\">f'Add <span class=\"subst\">&#123;minutes_added&#125;</span> minutes:'</span>)</span><br><span class=\"line\">    print(use.localize(before_dst+timedelta(minutes=minutes_added)).strftime(fmt))</span><br><span class=\"line\"></span><br><span class=\"line\">    before_dst = datetime.datetime(<span class=\"number\">2019</span>, <span class=\"number\">11</span>, <span class=\"number\">3</span>, <span class=\"number\">0</span>, <span class=\"number\">30</span>, <span class=\"number\">59</span>, <span class=\"number\">999999</span>)</span><br><span class=\"line\">    print(<span class=\"string\">f'\\n<span class=\"subst\">&#123;use_zone&#125;</span>: 2019-11-3, 02:00:00 clocks are turned backward 1 hour '</span>)</span><br><span class=\"line\">    print(<span class=\"string\">'timezone only changes after 3:00'</span>)</span><br><span class=\"line\">    print(use.localize(before_dst).strftime(fmt))</span><br><span class=\"line\">    minutes_added = <span class=\"number\">100</span></span><br><span class=\"line\">    print(<span class=\"string\">f'Add <span class=\"subst\">&#123;minutes_added&#125;</span> minutes:'</span>)</span><br><span class=\"line\">    print(use.localize(before_dst + timedelta(minutes=minutes_added)).strftime(fmt))</span><br><span class=\"line\"></span><br><span class=\"line\">    print(<span class=\"string\">'\\n'</span>+use.localize(before_dst).strftime(fmt))</span><br><span class=\"line\">    minutes_added = <span class=\"number\">40</span></span><br><span class=\"line\">    print(<span class=\"string\">f'Add <span class=\"subst\">&#123;minutes_added&#125;</span> minutes:'</span>)</span><br><span class=\"line\">    print(use.localize(before_dst + timedelta(minutes=minutes_added)).strftime(fmt))</span><br><span class=\"line\"></span><br><span class=\"line\">    after_dst = datetime.datetime(<span class=\"number\">2019</span>, <span class=\"number\">11</span>, <span class=\"number\">3</span>, <span class=\"number\">2</span>, <span class=\"number\">30</span>, <span class=\"number\">59</span>, <span class=\"number\">999999</span>)</span><br><span class=\"line\">    print(<span class=\"string\">f'After DST: <span class=\"subst\">&#123;use.localize(after_dst).strftime(fmt)&#125;</span>'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">python_dateutil_spike</span><span class=\"params\">()</span>:</span></span><br><span class=\"line\">    print(<span class=\"string\">'\\ndateutil'</span>)</span><br><span class=\"line\">    print(<span class=\"string\">'========'</span>)</span><br><span class=\"line\">    utc = dateutil.tz.gettz(utc_zone)</span><br><span class=\"line\">    use = dateutil.tz.gettz(use_zone)</span><br><span class=\"line\">    ger = dateutil.tz.gettz(ger_zone)</span><br><span class=\"line\">    tok = dateutil.tz.gettz(tok_zone)</span><br><span class=\"line\">    kol = dateutil.tz.gettz(kol_zone)</span><br><span class=\"line\"></span><br><span class=\"line\">    mar_10th = datetime.datetime(<span class=\"number\">2019</span>, <span class=\"number\">3</span>, <span class=\"number\">10</span>, <span class=\"number\">6</span>, <span class=\"number\">30</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, tzinfo=utc)</span><br><span class=\"line\">    print(mar_10th.astimezone(utc).strftime(fmt))</span><br><span class=\"line\">    print(mar_10th.astimezone(use).strftime(fmt) + <span class=\"string\">f' <span class=\"subst\">&#123;use_zone&#125;</span>'</span>)</span><br><span class=\"line\">    minutes_added = <span class=\"number\">40</span></span><br><span class=\"line\">    print(<span class=\"string\">f'Add <span class=\"subst\">&#123;minutes_added&#125;</span> minutes'</span>)</span><br><span class=\"line\">    mar_10th_updated = mar_10th + timedelta(minutes=minutes_added)</span><br><span class=\"line\">    print(mar_10th_updated.astimezone(use).strftime(fmt) + <span class=\"string\">f' <span class=\"subst\">&#123;use_zone&#125;</span>'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">pendulum_spike</span><span class=\"params\">()</span>:</span></span><br><span class=\"line\">    print(<span class=\"string\">'\\npendulum'</span>)</span><br><span class=\"line\">    print(<span class=\"string\">'========'</span>)</span><br><span class=\"line\">    <span class=\"comment\"># Localize timezone free UTC now</span></span><br><span class=\"line\">    utc_now = pendulum.utcnow()</span><br><span class=\"line\">    year = utc_now.year</span><br><span class=\"line\">    month = utc_now.month</span><br><span class=\"line\">    day = utc_now.day</span><br><span class=\"line\">    hour = utc_now.hour</span><br><span class=\"line\">    minute = utc_now.minute</span><br><span class=\"line\">    second = utc_now.second</span><br><span class=\"line\">    micro_sec = utc_now.microsecond</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"string\">\"\"\"</span></span><br><span class=\"line\"><span class=\"string\">    Create datetime string, timezone free</span></span><br><span class=\"line\"><span class=\"string\">    Localize the time string by adding timezones </span></span><br><span class=\"line\"><span class=\"string\">    \"\"\"</span></span><br><span class=\"line\">    print(<span class=\"string\">'Localize UTC time now'</span>)</span><br><span class=\"line\">    utc = pendulum.datetime(year, month, day, hour, minute, second, micro_sec, tzinfo=utc_zone)</span><br><span class=\"line\">    print(<span class=\"string\">f'<span class=\"subst\">&#123;utc.strftime(fmt)&#125;</span>  -\\t<span class=\"subst\">&#123;utc_zone&#125;</span>'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    cat = pendulum.datetime(year, month, day, hour, minute, second, micro_sec, tzinfo=cat_zone)</span><br><span class=\"line\">    print(<span class=\"string\">f'<span class=\"subst\">&#123;cat.strftime(fmt)&#125;</span> -\\t<span class=\"subst\">&#123;cat_zone&#125;</span>'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    use = pendulum.datetime(year, month, day, hour, minute, second, micro_sec, tzinfo=use_zone)</span><br><span class=\"line\">    print(<span class=\"string\">f'<span class=\"subst\">&#123;use.strftime(fmt)&#125;</span>  -\\t<span class=\"subst\">&#123;use_zone&#125;</span>'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    ger = pendulum.datetime(year, month, day, hour, minute, second, micro_sec, tzinfo=ger_zone)</span><br><span class=\"line\">    print(<span class=\"string\">f'<span class=\"subst\">&#123;ger.strftime(fmt)&#125;</span> -\\t<span class=\"subst\">&#123;ger_zone&#125;</span>'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    tok = pendulum.datetime(year, month, day, hour, minute, second, micro_sec, tzinfo=tok_zone)</span><br><span class=\"line\">    print(<span class=\"string\">f'<span class=\"subst\">&#123;tok.strftime(fmt)&#125;</span>  -\\t<span class=\"subst\">&#123;tok_zone&#125;</span>'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    kol = pendulum.datetime(year, month, day, hour, minute, second, micro_sec, tzinfo=kol_zone)</span><br><span class=\"line\">    print(<span class=\"string\">f'<span class=\"subst\">&#123;kol.strftime(fmt)&#125;</span>  -\\t<span class=\"subst\">&#123;kol_zone&#125;</span>'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">###############################################################################</span></span><br><span class=\"line\">    before_dst = datetime.datetime(<span class=\"number\">2019</span>, <span class=\"number\">3</span>, <span class=\"number\">31</span>, <span class=\"number\">1</span>, <span class=\"number\">59</span>, <span class=\"number\">59</span>, <span class=\"number\">999999</span>)</span><br><span class=\"line\">    ger = pendulum.datetime(</span><br><span class=\"line\">        before_dst.year, before_dst.month, before_dst.day, before_dst.hour,</span><br><span class=\"line\">        before_dst.minute, before_dst.second, before_dst.microsecond,</span><br><span class=\"line\">        tzinfo=ger_zone</span><br><span class=\"line\">    )</span><br><span class=\"line\">    print(</span><br><span class=\"line\">        <span class=\"string\">f'\\n<span class=\"subst\">&#123;ger_zone&#125;</span>: '</span></span><br><span class=\"line\">        <span class=\"string\">f'Sunday, 31 March 2019, 02:00:00 clocks were turned forward 1 hour'</span></span><br><span class=\"line\">    )</span><br><span class=\"line\">    print(ger.strftime(fmt))</span><br><span class=\"line\">    print(<span class=\"string\">'Add 1 microsecond'</span>)</span><br><span class=\"line\">    print(ger.add(microseconds=<span class=\"number\">1</span>).strftime(fmt))</span><br><span class=\"line\"></span><br><span class=\"line\">    before_dst = datetime.datetime(<span class=\"number\">2019</span>, <span class=\"number\">10</span>, <span class=\"number\">27</span>, <span class=\"number\">1</span>, <span class=\"number\">59</span>, <span class=\"number\">59</span>, <span class=\"number\">999999</span>)</span><br><span class=\"line\">    ger = pendulum.datetime(</span><br><span class=\"line\">        before_dst.year, before_dst.month, before_dst.day, before_dst.hour,</span><br><span class=\"line\">        before_dst.minute, before_dst.second, before_dst.microsecond,</span><br><span class=\"line\">        tzinfo=ger_zone</span><br><span class=\"line\">    )</span><br><span class=\"line\">    print(<span class=\"string\">f'\\n<span class=\"subst\">&#123;ger_zone&#125;</span>: Sunday, 27 October 2019, 03:00:00 clocks are turned backward 1 hour'</span>)</span><br><span class=\"line\">    print(ger.strftime(fmt))</span><br><span class=\"line\">    print(<span class=\"string\">f'Add 85 minutes to pass 3:00'</span>)</span><br><span class=\"line\">    print(ger.add(minutes=<span class=\"number\">85</span>).strftime(fmt))</span><br><span class=\"line\"><span class=\"comment\">###############################################################################</span></span><br><span class=\"line\">    before_dst = datetime.datetime(<span class=\"number\">2019</span>, <span class=\"number\">1</span>, <span class=\"number\">10</span>, <span class=\"number\">12</span>, <span class=\"number\">34</span>, <span class=\"number\">12</span>, <span class=\"number\">999999</span>)</span><br><span class=\"line\">    use = pendulum.datetime(</span><br><span class=\"line\">        before_dst.year, before_dst.month, before_dst.day, before_dst.hour,</span><br><span class=\"line\">        before_dst.minute, before_dst.second, before_dst.microsecond,</span><br><span class=\"line\">        tzinfo=use_zone</span><br><span class=\"line\">    )</span><br><span class=\"line\">    print(<span class=\"string\">f'\\n<span class=\"subst\">&#123;use_zone&#125;</span>: 10 January 2019, 12:34:12'</span>)</span><br><span class=\"line\">    print(use.strftime(fmt))</span><br><span class=\"line\"></span><br><span class=\"line\">    before_dst = datetime.datetime(<span class=\"number\">2019</span>, <span class=\"number\">3</span>, <span class=\"number\">10</span>, <span class=\"number\">1</span>, <span class=\"number\">30</span>, <span class=\"number\">59</span>, <span class=\"number\">999999</span>)</span><br><span class=\"line\">    use = pendulum.datetime(</span><br><span class=\"line\">        before_dst.year, before_dst.month, before_dst.day, before_dst.hour,</span><br><span class=\"line\">        before_dst.minute, before_dst.second, before_dst.microsecond,</span><br><span class=\"line\">        tzinfo=use_zone</span><br><span class=\"line\">    )</span><br><span class=\"line\">    print(<span class=\"string\">f'\\n<span class=\"subst\">&#123;use_zone&#125;</span>: Sunday, 10 March 2019, 02:00:00 clocks were turned forward 1 hour'</span>)</span><br><span class=\"line\">    print(<span class=\"string\">'Timezone starts changing after 2:00'</span>)</span><br><span class=\"line\">    print(use.strftime(fmt))</span><br><span class=\"line\">    minutes_added = <span class=\"number\">40</span></span><br><span class=\"line\">    print(<span class=\"string\">f'Add <span class=\"subst\">&#123;minutes_added&#125;</span> minutes:'</span>)</span><br><span class=\"line\">    print(use.add(minutes=minutes_added).strftime(fmt))</span><br><span class=\"line\"></span><br><span class=\"line\">    after_dst = datetime.datetime(<span class=\"number\">2019</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">12</span>, <span class=\"number\">34</span>, <span class=\"number\">12</span>, <span class=\"number\">999999</span>)</span><br><span class=\"line\">    use = pendulum.datetime(</span><br><span class=\"line\">        after_dst.year, after_dst.month, after_dst.day, after_dst.hour,</span><br><span class=\"line\">        after_dst.minute, after_dst.second, after_dst.microsecond,</span><br><span class=\"line\">        tzinfo=use_zone</span><br><span class=\"line\">    )</span><br><span class=\"line\">    print(<span class=\"string\">f'\\n<span class=\"subst\">&#123;use_zone&#125;</span>: 5 April 2019, 12:34:12'</span>)</span><br><span class=\"line\">    print(use.strftime(fmt))</span><br><span class=\"line\"></span><br><span class=\"line\">    before_dst = datetime.datetime(<span class=\"number\">2019</span>, <span class=\"number\">11</span>, <span class=\"number\">3</span>, <span class=\"number\">0</span>, <span class=\"number\">40</span>, <span class=\"number\">00</span>, <span class=\"number\">0</span>)</span><br><span class=\"line\">    use = pendulum.datetime(</span><br><span class=\"line\">        before_dst.year, before_dst.month, before_dst.day, before_dst.hour,</span><br><span class=\"line\">        before_dst.minute, before_dst.second, before_dst.microsecond,</span><br><span class=\"line\">        tzinfo=use_zone</span><br><span class=\"line\">    )</span><br><span class=\"line\">    print(<span class=\"string\">f'\\n<span class=\"subst\">&#123;use_zone&#125;</span>: Sunday, 3 November 2019, 02:00:00 clocks are turned backward 1 hour '</span>)</span><br><span class=\"line\">    print(use.strftime(fmt))</span><br><span class=\"line\">    minutes_added = <span class=\"number\">85</span></span><br><span class=\"line\">    print(<span class=\"string\">f'Add: <span class=\"subst\">&#123;minutes_added&#125;</span> minutes'</span>)</span><br><span class=\"line\">    print(use.add(minutes=minutes_added).strftime(fmt))</span><br><span class=\"line\"></span><br><span class=\"line\">    before_dst = datetime.datetime(<span class=\"number\">2019</span>, <span class=\"number\">11</span>, <span class=\"number\">3</span>, <span class=\"number\">0</span>, <span class=\"number\">40</span>, <span class=\"number\">00</span>, <span class=\"number\">0</span>)</span><br><span class=\"line\">    use = pendulum.datetime(</span><br><span class=\"line\">        before_dst.year, before_dst.month, before_dst.day, before_dst.hour,</span><br><span class=\"line\">        before_dst.minute, before_dst.second, before_dst.microsecond,</span><br><span class=\"line\">        tzinfo=use_zone</span><br><span class=\"line\">    )</span><br><span class=\"line\">    print(<span class=\"string\">'\\n'</span> + use.strftime(fmt))</span><br><span class=\"line\">    minutes_added = <span class=\"number\">35</span></span><br><span class=\"line\">    print(<span class=\"string\">f'Add: <span class=\"subst\">&#123;minutes_added&#125;</span> minutes'</span>)</span><br><span class=\"line\">    print(use.add(minutes=minutes_added).strftime(fmt))</span><br><span class=\"line\"></span><br><span class=\"line\">    after_dst = datetime.datetime(<span class=\"number\">2019</span>, <span class=\"number\">11</span>, <span class=\"number\">3</span>, <span class=\"number\">3</span>, <span class=\"number\">44</span>, <span class=\"number\">12</span>, <span class=\"number\">999999</span>)</span><br><span class=\"line\">    use = pendulum.datetime(</span><br><span class=\"line\">        after_dst.year, after_dst.month, after_dst.day, after_dst.hour,</span><br><span class=\"line\">        after_dst.minute, after_dst.second, after_dst.microsecond,</span><br><span class=\"line\">        tzinfo=use_zone</span><br><span class=\"line\">    )</span><br><span class=\"line\">    print(<span class=\"string\">f'\\n<span class=\"subst\">&#123;use_zone&#125;</span>: <span class=\"subst\">&#123;use.strftime(fmt)&#125;</span>'</span>)</span><br><span class=\"line\"><span class=\"comment\">###############################################################################</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">\"__main__\"</span>:</span><br><span class=\"line\">    pytz_spike()</span><br><span class=\"line\">    python_dateutil_spike()</span><br><span class=\"line\">    pendulum_spike()</span><br></pre></td></tr></table></figure>\n\n"}],"PostAsset":[],"PostCategory":[{"post_id":"ckg6cknqy00083z8aoibyhs55","category_id":"ckg6cknr6000b3z8a6unod0nk","_id":"ckg6cknr8000g3z8agjdb9pkm"},{"post_id":"ckg6cknr000093z8a9ncsc6w7","category_id":"ckg6cknr7000e3z8akpwnh01v","_id":"ckg6cknr8000j3z8aahzqj9rv"},{"post_id":"ckg6cknqm00023z8ai49yn3tm","category_id":"ckg6cknqu00063z8aerorexmq","_id":"ckg6cknra000n3z8a2fner0yn"},{"post_id":"ckg6cknqm00023z8ai49yn3tm","category_id":"ckg6cknr8000h3z8a4i4ip9ep","_id":"ckg6cknra000q3z8a6ulujsry"}],"PostTag":[{"post_id":"ckg6cknqm00023z8ai49yn3tm","tag_id":"ckg6cknqy00073z8anqhrhjtz","_id":"ckg6cknr7000d3z8a5xv64mdt"},{"post_id":"ckg6cknqy00083z8aoibyhs55","tag_id":"ckg6cknr6000c3z8au5ftsdgh","_id":"ckg6cknr9000l3z8a3qzn00c9"},{"post_id":"ckg6cknqy00083z8aoibyhs55","tag_id":"ckg6cknr7000f3z8aeysg8g5v","_id":"ckg6cknr9000m3z8ai542uv8m"},{"post_id":"ckg6cknqy00083z8aoibyhs55","tag_id":"ckg6cknr8000i3z8abk5t0tzl","_id":"ckg6cknra000p3z8aqewyb62r"},{"post_id":"ckg6cknr000093z8a9ncsc6w7","tag_id":"ckg6cknr9000k3z8adbwlp4fr","_id":"ckg6cknra000r3z8ar3dfxmj0"},{"post_id":"ckg6cknr2000a3z8aef13zsn0","tag_id":"ckg6cknra000o3z8anqq5o8le","_id":"ckg6cknrc000t3z8a5xhwu4ky"},{"post_id":"ckg6cknr2000a3z8aef13zsn0","tag_id":"ckg6cknra000s3z8am7w0xsew","_id":"ckg6cknrd000u3z8aom9cusan"}],"Tag":[{"name":"Sublime","_id":"ckg6cknqy00073z8anqhrhjtz"},{"name":"Django","_id":"ckg6cknr6000c3z8au5ftsdgh"},{"name":"Docker","_id":"ckg6cknr7000f3z8aeysg8g5v"},{"name":"Container","_id":"ckg6cknr8000i3z8abk5t0tzl"},{"name":"Hexo","_id":"ckg6cknr9000k3z8adbwlp4fr"},{"name":"Python","_id":"ckg6cknra000o3z8anqq5o8le"},{"name":"Datetime","_id":"ckg6cknra000s3z8am7w0xsew"}]}}